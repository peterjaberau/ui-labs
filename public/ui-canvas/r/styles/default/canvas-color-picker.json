{
  "name": "canvas-color-picker",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/canvas-color-picker.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Paintbrush, Droplet, Palette } from \"lucide-react\";\n\ntype CanvasColorPickerProps = {\n  value?: string;\n  defaultValue?: string;\n  defaultConsistency?: \"thin\" | \"medium\" | \"thick\";\n  previewSize?: \"sm\" | \"md\" | \"lg\";\n  showBrushPreview?: boolean;\n  onChange?: (color: string) => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\ninterface ColorMix {\n  color: string;\n  amount: number;\n  consistency: \"thin\" | \"medium\" | \"thick\";\n}\n\nconst previewSizes = {\n  sm: \"h-24\",\n  md: \"h-32\",\n  lg: \"h-40\",\n};\n\nconst consistencyStyles = {\n  thin: {\n    lineWidth: 2,\n    opacity: 0.3,\n    label: \"Light\",\n  },\n  medium: {\n    lineWidth: 4,\n    opacity: 0.6,\n    label: \"Medium\",\n  },\n  thick: {\n    lineWidth: 8,\n    opacity: 0.9,\n    label: \"Heavy\",\n  },\n};\n\nexport function CanvasColorPicker({\n  value,\n  defaultValue = \"#000000\",\n  defaultConsistency = \"medium\",\n  previewSize = \"md\",\n  showBrushPreview = true,\n  onChange,\n  className,\n  ...props\n}: CanvasColorPickerProps) {\n  const [currentColor, setCurrentColor] = React.useState(value || defaultValue);\n  const [consistency, setConsistency] = React.useState(defaultConsistency);\n  const [mixedColors, setMixedColors] = React.useState<\n    Array<{ color: string; amount: number; consistency: typeof consistency }>\n  >([]);\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const [isDrawing, setIsDrawing] = React.useState(false);\n  const [points, setPoints] = React.useState<\n    Array<{ x: number; y: number; pressure: number }>\n  >([]);\n\n  const updateBrushPreview = React.useCallback(() => {\n    if (!canvasRef.current || !showBrushPreview) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Set canvas size to match container\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n\n    // Clear previous drawing\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (points.length < 2) return;\n\n    // Draw the brush stroke\n    ctx.beginPath();\n    ctx.moveTo(points[0].x, points[0].y);\n    ctx.strokeStyle = currentColor;\n    ctx.lineWidth = consistencyStyles[consistency].lineWidth;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.globalAlpha = consistencyStyles[consistency].opacity;\n\n    // Create smooth curve through points\n    for (let i = 1; i < points.length - 2; i++) {\n      const xc = (points[i].x + points[i + 1].x) / 2;\n      const yc = (points[i].y + points[i + 1].y) / 2;\n      ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);\n    }\n\n    // Draw the stroke\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n  }, [currentColor, consistency, points, showBrushPreview]);\n\n  const getCanvasCoordinates = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n  };\n\n  const startDrawing = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const coords = getCanvasCoordinates(e);\n    setIsDrawing(true);\n    setPoints([{ x: coords.x, y: coords.y, pressure: 1 }]);\n  };\n\n  const draw = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    if (!isDrawing) return;\n    const coords = getCanvasCoordinates(e);\n    setPoints((prev) => [...prev, { x: coords.x, y: coords.y, pressure: 1 }]);\n    updateBrushPreview();\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n    setPoints([]);\n  };\n\n  const mixColors = React.useCallback(\n    (color1: string, color2: string, ratio: number) => {\n      // Convert hex to RGB\n      const rgb1 = parseInt(color1.slice(1), 16);\n      const rgb2 = parseInt(color2.slice(1), 16);\n\n      const r1 = (rgb1 >> 16) & 255;\n      const g1 = (rgb1 >> 8) & 255;\n      const b1 = rgb1 & 255;\n\n      const r2 = (rgb2 >> 16) & 255;\n      const g2 = (rgb2 >> 8) & 255;\n      const b2 = rgb2 & 255;\n\n      // Mix the colors\n      const r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n      const g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n      const b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n\n      // Convert back to hex\n      return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, \"0\")}`;\n    },\n    [],\n  );\n\n  const handleColorChange = (color: string) => {\n    setCurrentColor(color);\n    onChange?.(color);\n    updateBrushPreview();\n  };\n\n  const handleColorMix = (newColor: string, amount: number) => {\n    const mixed = mixColors(currentColor, newColor, amount);\n    handleColorChange(mixed);\n    setMixedColors([...mixedColors, { color: newColor, amount, consistency }]);\n  };\n\n  React.useEffect(() => {\n    if (value) {\n      setCurrentColor(value);\n    }\n  }, [value]);\n\n  React.useEffect(() => {\n    updateBrushPreview();\n  }, [currentColor, consistency, updateBrushPreview]);\n\n  return (\n    <div\n      className={cn(\n        \"relative rounded-xl border bg-gradient-to-b from-background to-muted/50 p-6 shadow-lg backdrop-blur-sm dark:border-border\",\n        className,\n      )}\n      {...props}\n    >\n      {/* Color Input */}\n      <div className=\"mb-6 flex items-center gap-4\">\n        <div className=\"relative flex-1\">\n          <input\n            type=\"color\"\n            value={currentColor}\n            onChange={(e) => handleColorChange(e.target.value)}\n            className=\"h-12 w-full cursor-pointer rounded-lg border-2 border-input bg-transparent p-1 transition-all hover:border-primary/50 focus:outline-none focus:ring-2 focus:ring-ring/20 dark:border-border\"\n          />\n        </div>\n        <div className=\"flex items-center gap-2 text-sm font-medium text-muted-foreground\">\n          {currentColor.toUpperCase()}\n        </div>\n      </div>\n\n      {/* Paint Consistency Control */}\n      <div className=\"mb-6\">\n        <label className=\"mb-3 block text-sm font-medium text-foreground dark:text-foreground/90\">\n          Paint Consistency\n        </label>\n        <div className=\"flex gap-3\">\n          {([\"thin\", \"medium\", \"thick\"] as const).map((c) => (\n            <button\n              key={c}\n              onClick={() => {\n                setConsistency(c);\n                setMixedColors([]);\n              }}\n              className={cn(\n                \"group flex flex-1 items-center justify-center gap-1 rounded-lg border border-input bg-background px-1 py-2 text-sm transition-all hover:border-primary/50 hover:bg-accent dark:border-border dark:bg-background/50\",\n                consistency === c &&\n                  \"border-primary bg-primary/10 dark:bg-primary/20\",\n              )}\n            >\n              <Droplet\n                className={cn(\n                  \"h-4 w-4 transition-colors\",\n                  consistency === c\n                    ? \"text-primary\"\n                    : \"text-muted-foreground group-hover:text-primary/70\",\n                )}\n                style={{\n                  opacity: consistencyStyles[c].opacity,\n                }}\n              />\n              <span\n                className={cn(\n                  \"text-xs transition-colors\",\n                  consistency === c\n                    ? \"font-medium text-primary\"\n                    : \"text-muted-foreground group-hover:text-primary/90\",\n                )}\n              >\n                {consistencyStyles[c].label}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Color Preview */}\n      <div className=\"space-y-4\">\n        <div\n          className={cn(\n            \"relative overflow-hidden rounded-xl border border-input bg-[url('/grid.svg')] shadow-inner transition-all dark:border-border\",\n            previewSizes[previewSize],\n          )}\n        >\n          <div\n            className=\"h-full w-full transition-opacity duration-200\"\n            style={{\n              backgroundColor: currentColor,\n              opacity: consistencyStyles[consistency].opacity,\n            }}\n          />\n          {showBrushPreview && (\n            <canvas\n              ref={canvasRef}\n              className=\"absolute inset-0 h-full w-full cursor-crosshair\"\n              onMouseDown={startDrawing}\n              onMouseMove={draw}\n              onMouseUp={stopDrawing}\n              onMouseLeave={stopDrawing}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Recent Mixes */}\n      {mixedColors.length > 0 && (\n        <div className=\"mt-6\">\n          <label className=\"mb-3 block text-sm font-medium text-foreground dark:text-foreground/90\">\n            Recent Mixes\n          </label>\n          <div className=\"flex flex-wrap gap-2\">\n            {mixedColors.slice(-5).map((mix, i) => (\n              <button\n                key={i}\n                onClick={() => handleColorChange(mix.color)}\n                className=\"group relative h-8 w-8 overflow-hidden rounded-full border border-input shadow-sm transition-transform hover:scale-110 dark:border-border\"\n                style={{\n                  backgroundColor: mix.color,\n                  opacity: consistencyStyles[mix.consistency].opacity,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}