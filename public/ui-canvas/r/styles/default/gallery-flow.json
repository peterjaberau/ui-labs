{
  "name": "gallery-flow",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/gallery-flow.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  motion,\n  AnimatePresence,\n  useSpring,\n  useTransform,\n} from \"framer-motion\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport interface GalleryFlowProps extends React.HTMLAttributes<HTMLDivElement> {\n  images: {\n    src: string;\n    alt?: string;\n    caption?: string;\n  }[];\n  variant?: \"flow\" | \"fade\" | \"slide\" | \"stack\";\n  thumbnailPosition?: \"bottom\" | \"left\" | \"right\";\n  autoPlay?: boolean;\n  interval?: number;\n  showArrows?: boolean;\n  showThumbnails?: boolean;\n  showDots?: boolean;\n  aspectRatio?: \"square\" | \"video\" | \"portrait\" | \"auto\";\n  fillMode?: \"cover\" | \"contain\";\n  thumbnailSize?: \"sm\" | \"md\" | \"lg\";\n  loop?: boolean;\n}\n\nconst GalleryFlow = React.forwardRef<HTMLDivElement, GalleryFlowProps>(\n  (\n    {\n      images,\n      variant = \"flow\",\n      thumbnailPosition = \"bottom\",\n      autoPlay = false,\n      interval = 3000,\n      showArrows = true,\n      showThumbnails = true,\n      showDots = false,\n      aspectRatio = \"video\",\n      fillMode = \"cover\",\n      thumbnailSize = \"md\",\n      loop = true,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n    const [isHovered, setIsHovered] = React.useState(false);\n    const [isDragging, setIsDragging] = React.useState(false);\n    const [slideDirection, setSlideDirection] = React.useState<1 | -1>(1);\n    const dragX = useSpring(0, { stiffness: 300, damping: 30 });\n    const opacity = useTransform(dragX, [-100, 0, 100], [0.5, 1, 0.5]);\n\n    // Auto-play functionality\n    React.useEffect(() => {\n      if (!autoPlay || isHovered || isDragging) return;\n\n      const timer = setInterval(() => {\n        if (currentIndex === images.length - 1 && !loop) {\n          clearInterval(timer);\n          return;\n        }\n        setSlideDirection(1);\n        setCurrentIndex((prev) => (prev + 1) % images.length);\n      }, interval);\n\n      return () => clearInterval(timer);\n    }, [\n      autoPlay,\n      currentIndex,\n      images.length,\n      interval,\n      isHovered,\n      isDragging,\n      loop,\n    ]);\n\n    const handleNext = () => {\n      if (currentIndex === images.length - 1 && !loop) return;\n      setSlideDirection(1);\n      setCurrentIndex((prev) => (prev + 1) % images.length);\n    };\n\n    const handlePrev = () => {\n      if (currentIndex === 0 && !loop) return;\n      setSlideDirection(-1);\n      setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);\n    };\n\n    const handleThumbnailClick = (index: number) => {\n      setSlideDirection(index > currentIndex ? 1 : -1);\n      setCurrentIndex(index);\n    };\n\n    const handleDragStart = () => setIsDragging(true);\n    const handleDragEnd = () => {\n      setIsDragging(false);\n      const threshold = 50;\n      if (dragX.get() > threshold) handlePrev();\n      if (dragX.get() < -threshold) handleNext();\n      dragX.set(0);\n    };\n\n    const aspectRatioClass = {\n      square: \"aspect-square\",\n      video: \"aspect-video\",\n      portrait: \"aspect-[3/4]\",\n      auto: \"aspect-auto\",\n    };\n\n    const thumbnailSizeClass = {\n      sm: \"h-12 w-12\",\n      md: \"h-16 w-16\",\n      lg: \"h-20 w-20\",\n    };\n\n    const thumbnailContainerClass = {\n      bottom: \"flex-row justify-center space-x-2 mt-2\",\n      left: \"flex-col space-y-2 mr-2\",\n      right: \"flex-col space-y-2 ml-2\",\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"relative\", className)}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        {...props}\n      >\n        <div\n          className={cn(\n            \"relative overflow-hidden rounded-lg\",\n            aspectRatioClass[aspectRatio],\n          )}\n        >\n          <AnimatePresence mode=\"wait\" initial={false} custom={slideDirection}>\n            <motion.div\n              key={currentIndex}\n              className=\"absolute inset-0\"\n              custom={slideDirection}\n              initial={(() => {\n                switch (variant) {\n                  case \"slide\":\n                    return {\n                      x: slideDirection * 1000,\n                      opacity: 0,\n                      scale: 0.8,\n                    };\n                  case \"fade\":\n                    return { opacity: 0 };\n                  case \"stack\":\n                    return {\n                      opacity: 0,\n                      scale: 0.8,\n                      rotateY: 45,\n                      z: -200,\n                    };\n                  default: // flow\n                    return { opacity: 0 };\n                }\n              })()}\n              animate={(() => {\n                switch (variant) {\n                  case \"slide\":\n                    return {\n                      x: 0,\n                      opacity: 1,\n                      scale: 1,\n                      transition: {\n                        x: { type: \"spring\", stiffness: 300, damping: 30 },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3 },\n                      },\n                    };\n                  case \"fade\":\n                    return { opacity: 1 };\n                  case \"stack\":\n                    return {\n                      opacity: 1,\n                      scale: 1,\n                      rotateY: 0,\n                      z: 0,\n                    };\n                  default: // flow\n                    return { opacity: 1 };\n                }\n              })()}\n              exit={(() => {\n                switch (variant) {\n                  case \"slide\":\n                    return {\n                      x: slideDirection * -1000,\n                      opacity: 0,\n                      scale: 0.8,\n                      transition: {\n                        x: { type: \"spring\", stiffness: 300, damping: 30 },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3 },\n                      },\n                    };\n                  case \"fade\":\n                    return { opacity: 0 };\n                  case \"stack\":\n                    return {\n                      opacity: 0,\n                      scale: 0.8,\n                      rotateY: -45,\n                      z: -200,\n                    };\n                  default: // flow\n                    return { opacity: 0 };\n                }\n              })()}\n              transition={(() => {\n                switch (variant) {\n                  case \"slide\":\n                    return {\n                      type: \"spring\",\n                      stiffness: 300,\n                      damping: 30,\n                      mass: 0.8,\n                      velocity: 50,\n                      opacity: { duration: 0.3 },\n                      scale: { duration: 0.3 },\n                    };\n                  case \"fade\":\n                    return {\n                      duration: 0.5,\n                      ease: \"easeInOut\",\n                    };\n                  case \"stack\":\n                    return {\n                      type: \"spring\",\n                      stiffness: 200,\n                      damping: 25,\n                      opacity: { duration: 0.3 },\n                    };\n                  default: // flow\n                    return {\n                      type: \"spring\",\n                      stiffness: 300,\n                      damping: 30,\n                    };\n                }\n              })()}\n              drag={variant === \"flow\" ? \"x\" : false}\n              dragConstraints={{ left: 0, right: 0 }}\n              dragElastic={0.1}\n              onDragStart={handleDragStart}\n              onDragEnd={handleDragEnd}\n              style={{\n                x: variant === \"flow\" ? dragX : undefined,\n                opacity: variant === \"flow\" ? opacity : undefined,\n                perspective: variant === \"stack\" ? 1000 : undefined,\n                width: \"100%\",\n                height: \"100%\",\n                position: \"absolute\",\n              }}\n            >\n              <motion.div\n                className=\"h-full w-full\"\n                style={{\n                  position: \"relative\",\n                  transformStyle: \"preserve-3d\",\n                }}\n              >\n                <Image\n                  src={images[currentIndex].src}\n                  alt={images[currentIndex].alt || `Image ${currentIndex + 1}`}\n                  fill\n                  className={cn(\n                    \"h-full w-full\",\n                    fillMode === \"cover\" ? \"object-cover\" : \"object-contain\",\n                  )}\n                />\n                {images[currentIndex].caption && (\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: 20 }}\n                    className=\"absolute inset-x-0 bottom-0 bg-black/50 p-4 text-white\"\n                  >\n                    <p className=\"text-sm\">{images[currentIndex].caption}</p>\n                  </motion.div>\n                )}\n              </motion.div>\n            </motion.div>\n          </AnimatePresence>\n\n          {showArrows && (\n            <>\n              <button\n                onClick={handlePrev}\n                className={cn(\n                  \"absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-black/20 p-2 text-white backdrop-blur-sm transition-all hover:bg-black/40\",\n                  !loop &&\n                    currentIndex === 0 &&\n                    \"cursor-not-allowed opacity-50\",\n                )}\n                disabled={!loop && currentIndex === 0}\n              >\n                <ChevronLeft className=\"h-6 w-6\" />\n              </button>\n              <button\n                onClick={handleNext}\n                className={cn(\n                  \"absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-black/20 p-2 text-white backdrop-blur-sm transition-all hover:bg-black/40\",\n                  !loop &&\n                    currentIndex === images.length - 1 &&\n                    \"cursor-not-allowed opacity-50\",\n                )}\n                disabled={!loop && currentIndex === images.length - 1}\n              >\n                <ChevronRight className=\"h-6 w-6\" />\n              </button>\n            </>\n          )}\n        </div>\n\n        {showDots && (\n          <div className=\"mt-4 flex justify-center space-x-2\">\n            {images.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => handleThumbnailClick(index)}\n                className={cn(\n                  \"h-2 w-2 rounded-full transition-all\",\n                  index === currentIndex\n                    ? \"scale-125 bg-primary\"\n                    : \"bg-gray-300 hover:bg-gray-400\",\n                )}\n              />\n            ))}\n          </div>\n        )}\n\n        {showThumbnails && (\n          <div\n            className={cn(\n              \"flex\",\n              thumbnailContainerClass[thumbnailPosition],\n              thumbnailPosition === \"bottom\" ? \"mt-2\" : \"\",\n            )}\n          >\n            {images.map((image, index) => (\n              <motion.button\n                key={index}\n                onClick={() => handleThumbnailClick(index)}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={cn(\n                  thumbnailSizeClass[thumbnailSize],\n                  \"relative overflow-hidden rounded-lg transition-all\",\n                  index === currentIndex\n                    ? \"ring-2 ring-primary ring-offset-2\"\n                    : \"opacity-70 hover:opacity-100\",\n                )}\n              >\n                <Image\n                  src={image.src}\n                  alt={image.alt || `Thumbnail ${index + 1}`}\n                  fill\n                  className=\"h-full w-full object-cover\"\n                />\n              </motion.button>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nGalleryFlow.displayName = \"GalleryFlow\";\n\nexport default GalleryFlow;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}