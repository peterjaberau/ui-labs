{
  "name": "color-scheme-generator",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/color-scheme-generator.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useCallback, useState } from \"react\";\nimport { ChevronDown, Copy, Download, Palette, RefreshCw } from \"lucide-react\";\nimport { CanvasButton } from \"./canvas-button\";\nimport { SketchInput } from \"./sketch-input\";\nimport { CanvasSlider } from \"./canvas-slider\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ColorSchemeGeneratorProps {\n  className?: string;\n}\n\ntype HarmonyMode =\n  | \"complementary\"\n  | \"analogous\"\n  | \"triadic\"\n  | \"tetradic\"\n  | \"monochromatic\";\n\nconst harmonies: { value: HarmonyMode; label: string }[] = [\n  { value: \"complementary\", label: \"Complementary\" },\n  { value: \"analogous\", label: \"Analogous\" },\n  { value: \"triadic\", label: \"Triadic\" },\n  { value: \"tetradic\", label: \"Tetradic\" },\n  { value: \"monochromatic\", label: \"Monochromatic\" },\n];\n\nfunction hslToHex(h: number, s: number, l: number): string {\n  l /= 100;\n  const a = (s * Math.min(l, 1 - l)) / 100;\n  const f = (n: number) => {\n    const k = (n + h / 30) % 12;\n    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color)\n      .toString(16)\n      .padStart(2, \"0\");\n  };\n  return `#${f(0)}${f(8)}${f(4)}`;\n}\n\nfunction hexToHsl(hex: string): [number, number, number] {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (!result) return [0, 0, 0];\n\n  let r = parseInt(result[1], 16) / 255;\n  let g = parseInt(result[2], 16) / 255;\n  let b = parseInt(result[3], 16) / 255;\n\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  let l = (max + min) / 2;\n\n  if (max !== min) {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n}\n\nfunction generateHarmony(\n  baseHue: number,\n  baseSat: number,\n  baseLight: number,\n  mode: HarmonyMode,\n): string[] {\n  const colors: string[] = [];\n\n  // Always add the base color\n  colors.push(hslToHex(baseHue, baseSat, baseLight));\n\n  switch (mode) {\n    case \"complementary\":\n      colors.push(hslToHex((baseHue + 180) % 360, baseSat, baseLight));\n      break;\n    case \"analogous\":\n      colors.push(hslToHex((baseHue + 30) % 360, baseSat, baseLight));\n      colors.push(hslToHex((baseHue - 30 + 360) % 360, baseSat, baseLight));\n      break;\n    case \"triadic\":\n      colors.push(hslToHex((baseHue + 120) % 360, baseSat, baseLight));\n      colors.push(hslToHex((baseHue + 240) % 360, baseSat, baseLight));\n      break;\n    case \"tetradic\":\n      colors.push(hslToHex((baseHue + 90) % 360, baseSat, baseLight));\n      colors.push(hslToHex((baseHue + 180) % 360, baseSat, baseLight));\n      colors.push(hslToHex((baseHue + 270) % 360, baseSat, baseLight));\n      break;\n    case \"monochromatic\":\n      colors.push(hslToHex(baseHue, baseSat, Math.max(20, baseLight - 30)));\n      colors.push(hslToHex(baseHue, baseSat, Math.min(90, baseLight + 30)));\n      break;\n  }\n\n  return colors;\n}\n\nexport function ColorSchemeGenerator({ className }: ColorSchemeGeneratorProps) {\n  const { toast } = useToast();\n  const [baseColor, setBaseColor] = useState(\"#6366f1\");\n  const [harmony, setHarmony] = useState<HarmonyMode>(\"tetradic\");\n  const [hue, saturation, lightness] = hexToHsl(baseColor);\n  const [showHarmonyDropdown, setShowHarmonyDropdown] = useState(false);\n\n  const colorScheme = generateHarmony(hue, saturation, lightness, harmony);\n\n  const handleRandomize = useCallback(() => {\n    const newHue = Math.floor(Math.random() * 360);\n    const newSat = Math.floor(Math.random() * 40) + 60; // 60-100\n    const newLight = Math.floor(Math.random() * 30) + 35; // 35-65\n    setBaseColor(hslToHex(newHue, newSat, newLight));\n  }, []);\n\n  const copyToClipboard = useCallback(\n    (text: string) => {\n      navigator.clipboard.writeText(text);\n      toast.success(\"Copied to clipboard!\");\n    },\n    [toast],\n  );\n\n  const exportScheme = useCallback(() => {\n    const data = {\n      baseColor,\n      harmony,\n      colors: colorScheme,\n    };\n    const blob = new Blob([JSON.stringify(data, null, 2)], {\n      type: \"application/json\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"color-scheme.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }, [baseColor, harmony, colorScheme]);\n\n  return (\n    <div className={cn(\"flex flex-col gap-6 p-4 xl:p-0 2xl:p-6\", className)}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Palette className=\"h-5 w-5\" />\n          <h2 className=\"whitespace-nowrap text-lg font-semibold\">\n            Color Scheme Generator\n          </h2>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <CanvasButton\n            variant=\"default\"\n            effect=\"splash\"\n            size=\"sm\"\n            onClick={handleRandomize}\n          >\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Randomize\n          </CanvasButton>\n          <CanvasButton\n            variant=\"default\"\n            effect=\"splash\"\n            size=\"sm\"\n            onClick={exportScheme}\n          >\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </CanvasButton>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <SketchInput\n              type=\"color\"\n              value={baseColor}\n              onChange={(e) => setBaseColor(e.target.value)}\n              className=\"h-10 w-20 cursor-pointer\"\n            />\n            <SketchInput\n              type=\"text\"\n              value={baseColor}\n              onChange={(e) => setBaseColor(e.target.value)}\n              className=\"w-28\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Hue</label>\n            <CanvasSlider\n              value={[hue]}\n              max={360}\n              step={1}\n              variant=\"default\"\n              onValueChange={(value) =>\n                setBaseColor(hslToHex(value[0], saturation, lightness))\n              }\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Saturation</label>\n            <CanvasSlider\n              value={[saturation]}\n              max={100}\n              step={1}\n              variant=\"default\"\n              onValueChange={(value) =>\n                setBaseColor(hslToHex(hue, value[0], lightness))\n              }\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Lightness</label>\n            <CanvasSlider\n              value={[lightness]}\n              max={100}\n              step={1}\n              variant=\"default\"\n              onValueChange={(value) =>\n                setBaseColor(hslToHex(hue, saturation, value[0]))\n              }\n            />\n          </div>\n\n          <div className=\"relative\">\n            <button\n              className=\"flex w-full items-center justify-between rounded-lg border bg-transparent px-4 py-2 text-left\"\n              onClick={() => setShowHarmonyDropdown(!showHarmonyDropdown)}\n            >\n              <span className=\"capitalize\">{harmony}</span>\n              <ChevronDown className=\"h-4 w-4\" />\n            </button>\n            {showHarmonyDropdown && (\n              <div className=\"absolute inset-x-0 top-full z-50 mt-1 rounded-lg border bg-background shadow-lg\">\n                {harmonies.map((h) => (\n                  <button\n                    key={h.value}\n                    className=\"flex w-full items-center px-4 py-2 hover:bg-accent\"\n                    onClick={() => {\n                      setHarmony(h.value);\n                      setShowHarmonyDropdown(false);\n                    }}\n                  >\n                    {h.label}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid gap-4\">\n          {colorScheme.map((color, index) => (\n            <div\n              key={index}\n              className=\"group flex items-center justify-between rounded-lg border p-4\"\n              style={{ backgroundColor: color }}\n            >\n              <div\n                className=\"font-mono text-sm\"\n                style={{\n                  color: hexToHsl(color)[2] > 50 ? \"#000000\" : \"#ffffff\",\n                }}\n              >\n                {color}\n              </div>\n              <CanvasButton\n                variant=\"default\"\n                size=\"sm\"\n                onClick={() => copyToClipboard(color)}\n                className=\"opacity-0 group-hover:opacity-100\"\n              >\n                <Copy className=\"h-4 w-4\" />\n              </CanvasButton>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}