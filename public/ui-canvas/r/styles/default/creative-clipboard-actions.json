{
  "name": "creative-clipboard-actions",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/creative-clipboard-actions.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy, Link, ClipboardCheck, ClipboardCopy } from \"lucide-react\";\n\ntype Variant = \"default\" | \"minimal\" | \"floating\" | \"gradient\" | \"outline\";\ntype Size = \"sm\" | \"md\" | \"lg\";\n\ninterface CreativeClipboardActionsProps {\n  text: string;\n  variant?: Variant;\n  size?: Size;\n  className?: string;\n  showLink?: boolean;\n  onCopy?: () => void;\n}\n\nconst variants = {\n  default: {\n    button: {\n      base: \"rounded-lg border transition-all duration-200\",\n      idle: \"border-muted-foreground/20 dark:border-muted-foreground/10 bg-background dark:bg-background/80 hover:bg-muted/80 dark:hover:bg-muted/20\",\n      copied:\n        \"border-green-500/50 dark:border-green-400/30 bg-green-50 dark:bg-green-950/30 text-green-600 dark:text-green-400\",\n    },\n    icon: {\n      idle: \"text-muted-foreground dark:text-muted-foreground/80\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n  },\n  minimal: {\n    button: {\n      base: \"rounded-md transition-all duration-200\",\n      idle: \"hover:bg-muted/80 dark:hover:bg-muted/20\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n    icon: {\n      idle: \"text-muted-foreground dark:text-muted-foreground/80\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n  },\n  floating: {\n    button: {\n      base: \"rounded-full shadow-lg transition-all duration-300\",\n      idle: \"bg-background dark:bg-background/90 hover:shadow-xl hover:-translate-y-0.5\",\n      copied:\n        \"bg-green-50 dark:bg-green-950/30 text-green-600 dark:text-green-400 shadow-green-500/20 dark:shadow-green-400/20\",\n    },\n    icon: {\n      idle: \"text-muted-foreground dark:text-muted-foreground/80\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n  },\n  gradient: {\n    button: {\n      base: \"rounded-lg transition-all duration-300 bg-gradient-to-r\",\n      idle: \"from-primary/10 to-primary-foreground/10 dark:from-primary/20 dark:to-primary-foreground/20 hover:from-primary/20 hover:to-primary-foreground/20 dark:hover:from-primary/30 dark:hover:to-primary-foreground/30\",\n      copied:\n        \"from-green-500/20 to-green-400/20 dark:from-green-500/30 dark:to-green-400/30\",\n    },\n    icon: {\n      idle: \"text-primary dark:text-primary/90\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n  },\n  outline: {\n    button: {\n      base: \"rounded-lg border-2 transition-all duration-200\",\n      idle: \"border-primary/50 dark:border-primary/30 hover:border-primary dark:hover:border-primary/50\",\n      copied: \"border-green-500/50 dark:border-green-400/30\",\n    },\n    icon: {\n      idle: \"text-primary dark:text-primary/90\",\n      copied: \"text-green-600 dark:text-green-400\",\n    },\n  },\n};\n\nconst sizes = {\n  sm: {\n    button: \"p-2\",\n    icon: \"h-4 w-4\",\n  },\n  md: {\n    button: \"p-3\",\n    icon: \"h-5 w-5\",\n  },\n  lg: {\n    button: \"p-4\",\n    icon: \"h-6 w-6\",\n  },\n};\n\nexport default function CreativeClipboardActions({\n  text,\n  variant = \"default\",\n  size = \"md\",\n  className,\n  showLink = false,\n  onCopy,\n}: CreativeClipboardActionsProps) {\n  const [copied, setCopied] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      onCopy?.();\n\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n    }\n  };\n\n  const IconComponent = showLink\n    ? copied\n      ? Check\n      : Link\n    : copied\n      ? ClipboardCheck\n      : ClipboardCopy;\n\n  return (\n    <motion.button\n      onClick={handleCopy}\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n      className={cn(\n        variants[variant].button.base,\n        variants[variant].button[copied ? \"copied\" : \"idle\"],\n        sizes[size].button,\n        className,\n      )}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={copied ? \"copied\" : \"idle\"}\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -10 }}\n          className=\"relative\"\n        >\n          <IconComponent\n            className={cn(\n              variants[variant].icon[copied ? \"copied\" : \"idle\"],\n              sizes[size].icon,\n            )}\n          />\n          {variant !== \"minimal\" && isHovered && !copied && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"absolute -right-1 -top-8 whitespace-nowrap rounded-md bg-foreground/90 px-2 py-1 text-xs text-background dark:bg-background/90 dark:text-foreground\"\n            >\n              {showLink ? \"Copy Link\" : \"Copy\"}\n            </motion.div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}