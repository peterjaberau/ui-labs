{
  "name": "canvas-dock",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "next-themes"
  ],
  "files": [
    {
      "path": "ui-canvas/canvas-dock.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, AnimatePresence, useAnimation } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"next-themes\";\n\ninterface CanvasDockProps {\n  className?: string;\n  children?: React.ReactNode;\n  position?: \"bottom\" | \"left\" | \"right\";\n  collapsed?: boolean;\n  onCollapsedChange?: (collapsed: boolean) => void;\n  variant?:\n    | \"wooden\"\n    | \"metallic\"\n    | \"modern\"\n    | \"glass\"\n    | \"neon\"\n    | \"chalk\"\n    | \"paper\"\n    | \"canvas\";\n}\n\ninterface CanvasDockItemProps {\n  icon?: React.ReactNode;\n  label?: string;\n  selected?: boolean;\n  onClick?: () => void;\n  className?: string;\n  children?: React.ReactNode;\n  variant?: \"brush\" | \"pencil\" | \"palette\" | \"tool\";\n}\n\nconst variantStyles = {\n  wooden: {\n    dock: \"bg-gradient-to-b from-amber-800 to-amber-950 border-amber-600\",\n    shadow: \"shadow-amber-900/20\",\n    texture: \"bg-[url('/wood-texture.png')] bg-repeat\",\n  },\n  metallic: {\n    dock: \"bg-gradient-to-b from-slate-300 to-slate-400 dark:from-slate-700 dark:to-slate-800 border-slate-400 dark:border-slate-600\",\n    shadow: \"shadow-slate-900/30\",\n    texture: \"bg-[url('/metal-texture.png')] bg-repeat\",\n  },\n  modern: {\n    dock: \"bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-800\",\n    shadow: \"shadow-black/10 dark:shadow-black/30\",\n    texture: \"\",\n  },\n  glass: {\n    dock: \"bg-white/10 dark:bg-slate-900/10 border-white/20 dark:border-slate-700/20 backdrop-blur-lg\",\n    shadow: \"shadow-white/10 dark:shadow-black/10\",\n    texture: \"bg-gradient-to-b from-white/5 to-black/5\",\n  },\n  neon: {\n    dock: \"bg-black/80 dark:bg-black border-[#FF00FF]/30 dark:border-[#00FFFF]/30\",\n    shadow: \"shadow-[#FF00FF]/20 dark:shadow-[#00FFFF]/20\",\n    texture: \"bg-gradient-to-r from-[#FF00FF]/10 to-[#00FFFF]/10\",\n  },\n  watercolor: {\n    dock: \"bg-white dark:bg-slate-900 border-blue-200 dark:border-blue-800\",\n    shadow: \"shadow-blue-500/10 dark:shadow-blue-500/20\",\n    texture:\n      \"[mask-image:url('/watercolor-mask.svg')] [mask-size:contain] bg-gradient-to-r from-blue-100/50 to-purple-100/50 dark:from-blue-900/50 dark:to-purple-900/50\",\n  },\n  chalk: {\n    dock: \"bg-slate-800 dark:bg-slate-950 border-slate-700 dark:border-slate-800\",\n    shadow: \"shadow-slate-900/40\",\n    texture: \"bg-[url('/chalk-texture.png')] bg-repeat opacity-90\",\n  },\n  paper: {\n    dock: \"bg-amber-50 dark:bg-amber-950 border-amber-200/50 dark:border-amber-800/50\",\n    shadow: \"shadow-amber-900/10\",\n    texture: \"bg-[url('/paper-texture.png')] bg-repeat\",\n  },\n  canvas: {\n    dock: \"bg-neutral-100 dark:bg-neutral-900 border-neutral-300 dark:border-neutral-700\",\n    shadow: \"shadow-neutral-900/20\",\n    texture: \"bg-[url('/canvas-texture.png')] bg-repeat\",\n  },\n};\n\nconst itemVariants = {\n  brush: {\n    idle: { rotate: 0, scale: 1 },\n    hover: { rotate: -15, scale: 1.1 },\n    selected: { rotate: -15, scale: 1.15, y: -8 },\n  },\n  pencil: {\n    idle: { rotate: 0, scale: 1 },\n    hover: { rotate: 15, scale: 1.1 },\n    selected: { rotate: 15, scale: 1.15, y: -8 },\n  },\n  palette: {\n    idle: { rotate: 0, scale: 1 },\n    hover: { rotate: 0, scale: 1.1 },\n    selected: { rotate: 0, scale: 1.15, y: -8 },\n  },\n  tool: {\n    idle: { rotate: 0, scale: 1 },\n    hover: { scale: 1.1 },\n    selected: { scale: 1.15, y: -8 },\n  },\n};\n\nconst paintSplatterColors = [\n  \"rgb(239 68 68)\", // red\n  \"rgb(34 197 94)\", // green\n  \"rgb(59 130 246)\", // blue\n  \"rgb(168 85 247)\", // purple\n  \"rgb(249 115 22)\", // orange\n];\n\nexport const CanvasDockItem = React.forwardRef<\n  HTMLDivElement,\n  CanvasDockItemProps\n>(\n  (\n    {\n      className,\n      icon,\n      label,\n      selected,\n      onClick,\n      variant = \"tool\",\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const controls = useAnimation();\n    const [splatterKey, setSplatterKey] = React.useState(0);\n\n    const handleClick = () => {\n      if (onClick) {\n        onClick();\n        setSplatterKey((prev) => prev + 1);\n      }\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"relative z-50 flex h-12 w-12 cursor-pointer items-center justify-center rounded-lg\",\n          \"transition-colors hover:bg-black/5 dark:hover:bg-white/5\",\n          selected && \"bg-black/10 dark:bg-white/10\",\n          className,\n        )}\n        variants={itemVariants[variant]}\n        initial=\"idle\"\n        whileHover=\"hover\"\n        animate={selected ? \"selected\" : \"idle\"}\n        onClick={handleClick}\n        {...props}\n      >\n        {icon || children}\n        <AnimatePresence>\n          {selected && splatterKey > 0 && (\n            <motion.div\n              key={splatterKey}\n              className=\"pointer-events-none absolute\"\n              initial={{ scale: 0, opacity: 0.8 }}\n              animate={{ scale: 2, opacity: 0 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div\n                className=\"h-8 w-8 rounded-full\"\n                style={{\n                  background:\n                    paintSplatterColors[\n                      Math.floor(Math.random() * paintSplatterColors.length)\n                    ],\n                  filter: \"url(#paint-splatter)\",\n                }}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n        {label && (\n          <motion.div\n            className=\"pointer-events-none absolute left-1/2 top-14 -translate-x-1/2 rounded-md bg-slate-900 px-2 py-1 text-xs text-white opacity-0 dark:bg-white dark:text-slate-900\"\n            initial={{ opacity: 0, y: -4 }}\n            whileHover={{ opacity: 1, y: 0 }}\n          >\n            {label}\n          </motion.div>\n        )}\n      </motion.div>\n    );\n  },\n);\n\nCanvasDockItem.displayName = \"CanvasDockItem\";\n\nconst CanvasDock = React.forwardRef<HTMLDivElement, CanvasDockProps>(\n  (\n    {\n      className,\n      children,\n      position = \"bottom\",\n      collapsed = false,\n      onCollapsedChange,\n      variant = \"wooden\",\n      ...props\n    },\n    ref,\n  ) => {\n    const { theme } = useTheme();\n    const [isHovered, setIsHovered] = React.useState(false);\n    const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n    const controls = useAnimation();\n\n    const styles = variantStyles[variant];\n\n    React.useEffect(() => {\n      setIsCollapsed(collapsed);\n    }, [collapsed]);\n\n    const handleToggleCollapse = () => {\n      const newCollapsed = !isCollapsed;\n      setIsCollapsed(newCollapsed);\n      onCollapsedChange?.(newCollapsed);\n\n      // Animate the brush stroke effect\n      controls.start({\n        pathLength: newCollapsed ? 0 : 1,\n        transition: { duration: 0.5, ease: \"easeInOut\" },\n      });\n    };\n\n    const positionClasses = {\n      bottom: \"bottom-4 left-1/2 -translate-x-1/2 flex-row\",\n      left: \"left-4 top-1/2 -translate-y-1/2 flex-col\",\n      right: \"right-4 top-1/2 -translate-y-1/2 flex-col\",\n    };\n\n    return (\n      <>\n        <motion.div\n          ref={ref}\n          className={cn(\n            \"fixed flex items-center justify-center gap-2 rounded-2xl border p-2\",\n            styles.dock,\n            styles.shadow,\n            styles.texture,\n            positionClasses[position],\n            isCollapsed && \"p-1\",\n            className,\n          )}\n          initial={false}\n          animate={{\n            width: isCollapsed\n              ? \"auto\"\n              : position === \"bottom\"\n                ? \"auto\"\n                : \"5rem\",\n            height: isCollapsed\n              ? \"auto\"\n              : position === \"bottom\"\n                ? \"5rem\"\n                : \"auto\",\n          }}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n          {...props}\n        >\n          <motion.button\n            className={cn(\n              \"flex h-8 w-8 items-center justify-center rounded-lg\",\n              \"hover:bg-black/5 dark:hover:bg-white/5\",\n              \"focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500\",\n            )}\n            onClick={handleToggleCollapse}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            <motion.div\n              animate={{\n                rotate: isCollapsed\n                  ? position === \"bottom\"\n                    ? 180\n                    : position === \"left\"\n                      ? 90\n                      : -90\n                  : 0,\n              }}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <polyline points=\"18 15 12 9 6 15\" />\n              </svg>\n            </motion.div>\n          </motion.button>\n\n          <AnimatePresence>\n            {!isCollapsed && (\n              <motion.div\n                className=\"flex items-center gap-2\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                transition={{ duration: 0.2 }}\n              >\n                {children}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n\n        <svg width=\"0\" height=\"0\">\n          <filter id=\"paint-splatter\">\n            <feTurbulence\n              type=\"fractalNoise\"\n              baseFrequency=\"0.8\"\n              numOctaves=\"3\"\n              seed=\"1\"\n            />\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"10\" />\n            <feGaussianBlur stdDeviation=\"1\" />\n          </filter>\n        </svg>\n\n        <svg\n          className=\"pointer-events-none fixed inset-0\"\n          style={{ zIndex: -1 }}\n        >\n          <motion.path\n            d=\"M 0 0 Q 100 50, 200 0 T 400 0\"\n            stroke={theme === \"dark\" ? \"white\" : \"black\"}\n            strokeWidth=\"2\"\n            strokeDasharray=\"0 1\"\n            fill=\"none\"\n            initial={{ pathLength: 0 }}\n            animate={controls}\n          />\n        </svg>\n      </>\n    );\n  },\n);\n\nCanvasDock.displayName = \"CanvasDock\";\n\nexport { CanvasDock };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}