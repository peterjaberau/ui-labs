{
  "name": "texture-browser",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/texture-browser.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\nimport { Search, Grid2x2, List } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { SketchInput } from \"@/registry/default/ui-canvas/sketch-input\";\nimport {\n  CanvasModal,\n  CanvasModalContent,\n  CanvasModalDescription,\n  CanvasModalHeader,\n  CanvasModalTitle,\n} from \"@/registry/default/ui-canvas/canvas-modal\";\n\nexport interface TextureItem {\n  id: string;\n  name: string;\n  url: string;\n  thumbnail: string;\n  description?: string;\n  tags?: string[];\n  dimensions?: {\n    width: number;\n    height: number;\n  };\n  fileSize?: string;\n}\n\nexport interface TextureBrowserProps {\n  /** Array of texture items to display */\n  textures: TextureItem[];\n  /** Callback when a texture is selected */\n  onSelect?: (texture: TextureItem) => void;\n  /** Initial selected texture ID */\n  defaultSelected?: string;\n  /** Grid or list view mode */\n  defaultViewMode?: \"grid\" | \"list\";\n  /** Number of columns in grid view for different breakpoints */\n  gridCols?: {\n    default: number;\n    sm?: number;\n    md?: number;\n    lg?: number;\n    xl?: number;\n  };\n  /** Show texture details (dimensions, file size) */\n  showDetails?: boolean;\n  /** HTML div element props */\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport default function TextureBrowser({\n  textures,\n  onSelect,\n  defaultSelected,\n  defaultViewMode = \"grid\",\n  gridCols = {\n    default: 2,\n    md: 3,\n    lg: 4,\n  },\n  showDetails = true,\n  className,\n  style,\n  ...props\n}: TextureBrowserProps) {\n  const { theme } = useTheme();\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [selectedTexture, setSelectedTexture] = React.useState<string | null>(\n    defaultSelected || null,\n  );\n  const [viewMode, setViewMode] = React.useState<\"grid\" | \"list\">(\n    defaultViewMode,\n  );\n  const [previewTexture, setPreviewTexture] =\n    React.useState<TextureItem | null>(null);\n\n  const filteredTextures = React.useMemo(\n    () =>\n      textures.filter(\n        (texture) =>\n          texture.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          texture.tags?.some((tag) =>\n            tag.toLowerCase().includes(searchQuery.toLowerCase()),\n          ) ||\n          texture.description\n            ?.toLowerCase()\n            .includes(searchQuery.toLowerCase()),\n      ),\n    [textures, searchQuery],\n  );\n\n  const handleTextureClick = React.useCallback(\n    (texture: TextureItem) => {\n      setSelectedTexture(texture.id);\n      setPreviewTexture(texture);\n      onSelect?.(texture);\n    },\n    [onSelect],\n  );\n\n  const gridColsClass = React.useMemo(() => {\n    const cols = [];\n    cols.push(`grid-cols-${gridCols.default}`);\n    if (gridCols.sm) cols.push(`sm:grid-cols-${gridCols.sm}`);\n    if (gridCols.md) cols.push(`md:grid-cols-${gridCols.md}`);\n    if (gridCols.lg) cols.push(`lg:grid-cols-${gridCols.lg}`);\n    if (gridCols.xl) cols.push(`xl:grid-cols-${gridCols.xl}`);\n    return cols.join(\" \");\n  }, [gridCols]);\n\n  return (\n    <div\n      className={cn(\n        \"relative flex flex-col gap-4 rounded-lg border p-4\",\n        \"dark:bg-background dark:text-foreground\",\n        className,\n      )}\n      style={style}\n      {...props}\n    >\n      <div className=\"border-b p-4 dark:border-gray-800\">\n        {/* Search and view controls */}\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-4 top-1/2 z-20 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <SketchInput\n              variant=\"ink\"\n              className=\"pl-10\"\n              placeholder=\"Search textures...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n          <button\n            className={cn(\n              \"rounded-md p-2 hover:bg-accent\",\n              viewMode === \"grid\" && \"bg-accent\",\n            )}\n            onClick={() => setViewMode(\"grid\")}\n          >\n            <Grid2x2 className=\"h-4 w-4\" />\n          </button>\n          <button\n            className={cn(\n              \"rounded-md p-2 hover:bg-accent\",\n              viewMode === \"list\" && \"bg-accent\",\n            )}\n            onClick={() => setViewMode(\"list\")}\n          >\n            <List className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Texture grid/list */}\n      <ScrollArea className=\"h-[500px]\">\n        <div\n          className={cn(\n            viewMode === \"grid\"\n              ? `grid gap-4 ${gridColsClass}`\n              : \"flex flex-col gap-4\",\n          )}\n        >\n          {filteredTextures.map((texture) => (\n            <div\n              key={texture.id}\n              className={cn(\n                \"transition-all duration-200\",\n                viewMode === \"grid\"\n                  ? [\n                      \"aspect-square rounded-lg\",\n                      \"border-2 dark:border-gray-800\",\n                      \"hover:border-primary dark:hover:border-primary\",\n                      selectedTexture === texture.id\n                        ? \"border-primary dark:border-primary\"\n                        : \"border-transparent\",\n                    ]\n                  : [\n                      \"flex h-20 items-center gap-4\",\n                      \"rounded-lg border dark:border-gray-800\",\n                      \"hover:bg-accent dark:hover:bg-accent\",\n                      \"p-2\",\n                      selectedTexture === texture.id &&\n                        \"bg-accent dark:bg-accent\",\n                    ],\n              )}\n              onClick={() => handleTextureClick(texture)}\n            >\n              {viewMode === \"grid\" ? (\n                <div className=\"relative aspect-square\">\n                  <Image\n                    src={texture.thumbnail}\n                    alt={texture.name}\n                    fill\n                    className=\"rounded-lg object-cover\"\n                  />\n                </div>\n              ) : (\n                <>\n                  <div className=\"relative h-16 w-16\">\n                    <Image\n                      src={texture.thumbnail}\n                      alt={texture.name}\n                      fill\n                      className=\"rounded-lg object-cover\"\n                    />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">{texture.name}</h3>\n                    {showDetails && (\n                      <div className=\"mt-1 text-sm text-muted-foreground\">\n                        {texture.dimensions && (\n                          <p>\n                            {texture.dimensions.width} x{\" \"}\n                            {texture.dimensions.height}px\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n\n      {/* Full-screen preview */}\n      <CanvasModal\n        open={previewTexture !== null}\n        onOpenChange={() => setPreviewTexture(null)}\n      >\n        <CanvasModalContent className=\"max-h-[90vh] max-w-[90vw] p-0 transition-all duration-300 animate-in fade-in-0 zoom-in-95\">\n          {previewTexture && (\n            <div className=\"relative flex h-[85vh] w-full flex-col\">\n              <div className=\"relative flex-1 overflow-hidden\">\n                <Image\n                  src={previewTexture.url}\n                  alt={previewTexture.name}\n                  className=\"object-contain transition-transform duration-300 hover:scale-105\"\n                  fill\n                  quality={100}\n                  priority\n                  sizes=\"(max-width: 768px) 100vw, 90vw\"\n                />\n              </div>\n              <div className=\"absolute inset-x-0 bottom-0 bg-background/80 p-4 backdrop-blur transition-transform duration-300 animate-in slide-in-from-bottom\">\n                <CanvasModalHeader>\n                  <CanvasModalTitle>{previewTexture.name}</CanvasModalTitle>\n                  {previewTexture.description && (\n                    <CanvasModalDescription>\n                      {previewTexture.description}\n                    </CanvasModalDescription>\n                  )}\n                </CanvasModalHeader>\n                {showDetails && (\n                  <div className=\"mt-2 space-y-1 text-sm text-muted-foreground\">\n                    {previewTexture.dimensions && (\n                      <p>\n                        Dimensions: {previewTexture.dimensions.width} x{\" \"}\n                        {previewTexture.dimensions.height}px\n                      </p>\n                    )}\n                    {previewTexture.fileSize && (\n                      <p>Size: {previewTexture.fileSize}</p>\n                    )}\n                    {previewTexture.tags && previewTexture.tags.length > 0 && (\n                      <p>Tags: {previewTexture.tags.join(\", \")}</p>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </CanvasModalContent>\n      </CanvasModal>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}