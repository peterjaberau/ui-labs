{
  "name": "texture-blend-transitions",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/texture-blend-transitions.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useTheme } from \"next-themes\";\n\ninterface TextureBlendTransitionsProps {\n  isActive?: boolean;\n  texture?: \"watercolor\" | \"paint\" | \"paper\";\n  duration?: number;\n  children: React.ReactNode;\n  onTransitionComplete?: () => void;\n  intensity?: number;\n  colorScheme?: {\n    light: string;\n    dark: string;\n  };\n  blendMode?: \"normal\" | \"multiply\" | \"screen\" | \"overlay\";\n  customFilter?: string;\n}\n\nconst textures = {\n  watercolor: {\n    filter: (intensity: number, colorScheme: string) =>\n      `url(#watercolorEffect) drop-shadow(0 4px 8px ${colorScheme})`,\n    transition: { duration: 1.2, ease: [0.43, 0.13, 0.23, 0.96] },\n  },\n  paint: {\n    filter: (intensity: number, colorScheme: string) =>\n      `url(#paintEffect) drop-shadow(0 4px 8px ${colorScheme})`,\n    transition: { duration: 1, ease: [0.4, 0, 0.2, 1] },\n  },\n  paper: {\n    filter: (intensity: number, colorScheme: string) =>\n      `url(#paperEffect) drop-shadow(0 4px 8px ${colorScheme})`,\n    transition: { duration: 0.8, ease: [0.4, 0, 0.2, 1] },\n  },\n};\n\nexport default function TextureBlendTransitions({\n  isActive = false,\n  texture = \"watercolor\",\n  duration = 1,\n  children,\n  onTransitionComplete,\n  intensity = 1,\n  colorScheme = {\n    light: \"rgba(0, 0, 0, 0.1)\",\n    dark: \"rgba(255, 255, 255, 0.1)\",\n  },\n  blendMode = \"normal\",\n  customFilter,\n}: TextureBlendTransitionsProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { theme } = useTheme();\n  const currentColorScheme =\n    theme === \"dark\" ? colorScheme.dark : colorScheme.light;\n\n  useEffect(() => {\n    if (isActive && onTransitionComplete) {\n      const timer = setTimeout(onTransitionComplete, duration * 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [isActive, duration, onTransitionComplete]);\n\n  return (\n    <div ref={containerRef} className=\"relative overflow-hidden\">\n      <svg className=\"absolute h-0 w-0\">\n        <defs>\n          <filter id=\"watercolorEffect\">\n            <feTurbulence\n              type=\"fractalNoise\"\n              baseFrequency={0.01 * intensity}\n              numOctaves=\"3\"\n              seed={Math.random() * 100}\n            />\n            <feDisplacementMap in=\"SourceGraphic\" scale={30 * intensity} />\n            <feGaussianBlur stdDeviation={2 * intensity} />\n            <feBlend mode={blendMode} />\n          </filter>\n\n          <filter id=\"paintEffect\">\n            <feTurbulence\n              type=\"turbulence\"\n              baseFrequency={0.02 * intensity}\n              numOctaves=\"2\"\n              seed={Math.random() * 100}\n            />\n            <feDisplacementMap in=\"SourceGraphic\" scale={20 * intensity} />\n            <feColorMatrix type=\"saturate\" values={`${1.5 * intensity}`} />\n            <feBlend mode={blendMode} />\n          </filter>\n\n          <filter id=\"paperEffect\">\n            <feTurbulence\n              type=\"fractalNoise\"\n              baseFrequency={0.04 * intensity}\n              seed={Math.random() * 100}\n            />\n            <feDisplacementMap in=\"SourceGraphic\" scale={10 * intensity} />\n            <feBlend mode={blendMode} />\n          </filter>\n        </defs>\n      </svg>\n\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={isActive ? \"active\" : \"inactive\"}\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{\n            opacity: 1,\n            scale: 1,\n            filter:\n              customFilter ||\n              textures[texture].filter(intensity, currentColorScheme),\n          }}\n          exit={{ opacity: 0, scale: 1.05 }}\n          transition={{\n            ...textures[texture].transition,\n            duration,\n          }}\n          className=\"h-full w-full\"\n          style={{ mixBlendMode: blendMode }}\n        >\n          {children}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}