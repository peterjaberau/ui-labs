{
  "name": "studio-light",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "next-themes"
  ],
  "files": [
    {
      "path": "ui-canvas/studio-light.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, useMotionValue, useTransform, animate } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"next-themes\";\n\ninterface StudioLightProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  intensity?: number;\n  size?: \"sm\" | \"md\" | \"lg\" | \"full\";\n  color?: string;\n  autoAnimate?: boolean;\n  variant?: \"soft\" | \"harsh\" | \"dramatic\" | \"rim\" | \"butterfly\";\n  followMouse?: boolean;\n  lightPosition?: { x: number; y: number };\n}\n\nconst sizeStyles = {\n  sm: \"w-64 h-64\",\n  md: \"w-96 h-96\",\n  lg: \"w-[32rem] h-[32rem]\",\n  full: \"w-full h-full\",\n};\n\nconst variantStyles = {\n  soft: {\n    blur: \"100px\",\n    opacity: 0.5,\n    spread: 1.2,\n    secondary: 0.3,\n  },\n  harsh: {\n    blur: \"30px\",\n    opacity: 0.7,\n    spread: 0.8,\n    secondary: 0.1,\n  },\n  dramatic: {\n    blur: \"50px\",\n    opacity: 0.8,\n    spread: 1.5,\n    secondary: 0.4,\n  },\n  rim: {\n    blur: \"20px\",\n    opacity: 0.9,\n    spread: 0.6,\n    secondary: 0.2,\n  },\n  butterfly: {\n    blur: \"40px\",\n    opacity: 0.6,\n    spread: 1,\n    secondary: 0.5,\n  },\n};\n\nexport function StudioLight({\n  children,\n  className,\n  intensity = 1,\n  size = \"md\",\n  color = \"#ffffff\",\n  autoAnimate = false,\n  variant = \"soft\",\n  followMouse = true,\n  lightPosition,\n}: StudioLightProps) {\n  const { theme } = useTheme();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 });\n\n  const styles = variantStyles[variant];\n\n  const lightX = useTransform(\n    mouseX,\n    [0, dimensions.width],\n    [-50 * intensity, 50 * intensity],\n  );\n  const lightY = useTransform(\n    mouseY,\n    [0, dimensions.height],\n    [-50 * intensity, 50 * intensity],\n  );\n\n  React.useEffect(() => {\n    if (autoAnimate && !followMouse) {\n      const animateLight = async () => {\n        await animate(mouseX, dimensions.width, {\n          duration: 4,\n          ease: \"easeInOut\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        });\n      };\n\n      const animateHeight = async () => {\n        await animate(mouseY, dimensions.height, {\n          duration: 5,\n          ease: \"easeInOut\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        });\n      };\n\n      animateLight();\n      animateHeight();\n    }\n  }, [autoAnimate, followMouse, dimensions, mouseX, mouseY]);\n\n  React.useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        setDimensions({\n          width: containerRef.current.offsetWidth,\n          height: containerRef.current.offsetHeight,\n        });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n    return () => window.removeEventListener(\"resize\", updateDimensions);\n  }, []);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!followMouse || !containerRef.current) return;\n\n    const rect = containerRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    mouseX.set(x);\n    mouseY.set(y);\n  };\n\n  React.useEffect(() => {\n    if (lightPosition && !followMouse && !autoAnimate) {\n      mouseX.set(lightPosition.x * dimensions.width);\n      mouseY.set(lightPosition.y * dimensions.height);\n    }\n  }, [lightPosition, followMouse, autoAnimate, dimensions, mouseX, mouseY]);\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className={cn(\"relative overflow-hidden\", sizeStyles[size], className)}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={() => {\n        if (followMouse) {\n          mouseX.set(dimensions.width / 2);\n          mouseY.set(dimensions.height / 2);\n        }\n      }}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.div\n        className=\"pointer-events-none absolute\"\n        style={{\n          x: lightX,\n          y: lightY,\n          width: `${200 * styles.spread}%`,\n          height: `${200 * styles.spread}%`,\n          transform: \"translate(-50%, -50%)\",\n          background: `radial-gradient(circle, ${color} 0%, transparent 70%)`,\n          opacity: styles.opacity * intensity,\n          filter: `blur(${styles.blur})`,\n          mixBlendMode: theme === \"dark\" ? \"screen\" : \"multiply\",\n        }}\n      />\n\n      <motion.div\n        className=\"pointer-events-none absolute\"\n        style={{\n          x: useTransform(lightX, (x) => x * -0.5),\n          y: useTransform(lightY, (y) => y * -0.5),\n          width: `${150 * styles.spread}%`,\n          height: `${150 * styles.spread}%`,\n          transform: \"translate(-50%, -50%)\",\n          background: `radial-gradient(circle, ${color} 0%, transparent 70%)`,\n          opacity: styles.opacity * styles.secondary * intensity,\n          filter: `blur(${styles.blur})`,\n          mixBlendMode: theme === \"dark\" ? \"screen\" : \"multiply\",\n        }}\n      />\n\n      <div className=\"relative z-10\">{children}</div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}