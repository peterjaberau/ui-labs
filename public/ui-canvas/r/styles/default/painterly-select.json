{
  "name": "painterly-select",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "@radix-ui/react-select",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/painterly-select.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronDown } from \"lucide-react\";\n\nconst PainterlySelect = SelectPrimitive.Root;\n\nconst PainterlySelectValue = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Value>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Value>\n>(({ className, placeholder = \"Select an option\", ...props }, ref) => (\n  <SelectPrimitive.Value\n    ref={ref}\n    placeholder={placeholder}\n    className={cn(\n      \"text-sm font-medium\",\n      \"data-[placeholder]:text-muted-foreground\",\n      \"dark:text-neutral-200 dark:data-[placeholder]:text-neutral-400\",\n      className,\n    )}\n    {...props}\n  />\n));\nPainterlySelectValue.displayName = SelectPrimitive.Value.displayName;\n\nconst PainterlySelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"group relative flex h-11 w-full items-center justify-between gap-2 rounded-lg bg-background px-4 py-2 text-sm ring-offset-background focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n      // Paint drip effect - Light mode\n      \"before:absolute before:inset-x-0 before:bottom-0 before:h-[120%] before:origin-bottom before:scale-y-0 before:bg-gradient-to-t before:from-primary/10 before:to-transparent before:transition-transform before:duration-500 before:ease-out group-hover:before:scale-y-100\",\n      // Border effect - Light mode\n      \"after:absolute after:inset-0 after:rounded-lg after:border after:border-input after:transition-colors after:duration-300 group-hover:after:border-primary/50\",\n      // Dark mode specific styles\n      \"dark:bg-neutral-900\",\n      \"dark:before:from-primary/20\",\n      \"dark:after:border-neutral-700 dark:group-hover:after:border-primary/60\",\n      className,\n    )}\n    {...props}\n  >\n    <motion.div\n      className=\"relative flex flex-1 items-center\"\n      initial={false}\n      animate={{ x: 0, opacity: 1 }}\n      exit={{ x: -10, opacity: 0 }}\n      transition={{ duration: 0.2 }}\n    >\n      {children}\n    </motion.div>\n    <motion.div\n      className=\"relative flex items-center\"\n      initial={false}\n      animate={{ rotate: props[\"data-state\"] === \"open\" ? 180 : 0 }}\n      transition={{ duration: 0.3, ease: \"anticipate\" }}\n    >\n      <ChevronDown className=\"h-4 w-4 shrink-0 opacity-50 transition-colors group-hover:opacity-100 dark:opacity-40 dark:group-hover:opacity-90\" />\n    </motion.div>\n  </SelectPrimitive.Trigger>\n));\nPainterlySelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst contentVariants = {\n  initial: {\n    opacity: 0,\n    scale: 0.95,\n    y: -8,\n  },\n  animate: {\n    opacity: 1,\n    scale: 1,\n    y: 0,\n    transition: {\n      duration: 0.3,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    y: 8,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n};\n\nconst PainterlySelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <AnimatePresence>\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"relative z-50 min-w-[8rem] overflow-hidden rounded-lg border bg-popover text-popover-foreground shadow-md\",\n          \"dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-200\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <motion.div\n          variants={contentVariants}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n        >\n          <div className=\"max-h-[300px] overflow-auto p-1\">\n            <div className=\"absolute inset-x-0 top-0 h-4 bg-gradient-to-b from-popover to-transparent dark:from-neutral-900\" />\n            <SelectPrimitive.Viewport>{children}</SelectPrimitive.Viewport>\n            <div className=\"absolute inset-x-0 bottom-0 h-4 bg-gradient-to-t from-popover to-transparent dark:from-neutral-900\" />\n          </div>\n        </motion.div>\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  </AnimatePresence>\n));\nPainterlySelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst PainterlySelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"group relative flex h-9 cursor-pointer select-none items-center rounded-md px-3 py-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      // Paint splash effect on hover - Light mode\n      \"before:absolute before:inset-0 before:-z-10 before:origin-center before:scale-0 before:rounded-full before:bg-primary/10 before:transition-transform before:duration-300 before:ease-out group-hover:before:scale-100\",\n      // Paint drip effect when selected - Light mode\n      \"after:absolute after:inset-0 after:-z-20 after:origin-top after:scale-y-0 after:bg-gradient-to-b after:from-primary/20 after:to-transparent after:transition-transform after:duration-500 data-[state=checked]:after:scale-y-100\",\n      // Selected state - Light mode\n      \"data-[state=checked]:font-medium data-[state=checked]:text-primary\",\n      // Dark mode\n      \"dark:text-neutral-200\",\n      \"dark:before:bg-primary/20\",\n      \"dark:after:from-primary/30\",\n      \"dark:group-hover:text-white dark:data-[state=checked]:text-primary\",\n      className,\n    )}\n    {...props}\n  >\n    <motion.span\n      className=\"relative\"\n      initial={{ x: -10, opacity: 0 }}\n      animate={{ x: 0, opacity: 1 }}\n      exit={{ x: 10, opacity: 0 }}\n      transition={{ duration: 0.2 }}\n    >\n      {children}\n    </motion.span>\n  </SelectPrimitive.Item>\n));\nPainterlySelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst PainterlySelectGroup = SelectPrimitive.Group;\n\nconst PainterlySelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"relative px-3 py-2 text-sm font-semibold text-muted-foreground\",\n      \"dark:text-neutral-400\",\n      // Artistic underline effect\n      \"after:absolute after:inset-x-2 after:bottom-0 after:h-px after:bg-gradient-to-r after:from-transparent after:via-muted-foreground/30 after:to-transparent dark:after:via-neutral-500/30\",\n      className,\n    )}\n    {...props}\n  />\n));\nPainterlySelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst PainterlySelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1 my-1 h-px bg-gradient-to-r from-transparent via-muted/50 to-transparent transition-colors dark:via-neutral-600/50\",\n      className,\n    )}\n    {...props}\n  />\n));\nPainterlySelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  PainterlySelect,\n  PainterlySelectGroup,\n  PainterlySelectValue,\n  PainterlySelectTrigger,\n  PainterlySelectContent,\n  PainterlySelectLabel,\n  PainterlySelectItem,\n  PainterlySelectSeparator,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}