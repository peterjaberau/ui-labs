{
  "name": "brush-style-selector",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/brush-style-selector.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Paintbrush,\n  Circle,\n  Square,\n  Star,\n  Minus,\n  Plus,\n  Droplet,\n  Settings2,\n  RefreshCw,\n} from \"lucide-react\";\n\nexport type BrushStyle = \"round\" | \"square\" | \"star\" | \"custom\";\nexport type BrushPreset = {\n  id: string;\n  name: string;\n  size: number;\n  opacity: number;\n  style: BrushStyle;\n  color?: string;\n  hardness?: number;\n  angle?: number;\n  spacing?: number;\n};\n\nexport interface BrushStyleSelectorProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  value: BrushPreset;\n  presets?: BrushPreset[];\n  onValueChange?: (value: BrushPreset) => void;\n  minSize?: number;\n  maxSize?: number;\n  showAdvancedControls?: boolean;\n}\n\nexport default function BrushStyleSelector({\n  value,\n  presets = [],\n  onValueChange,\n  minSize = 1,\n  maxSize = 100,\n  className,\n  showAdvancedControls = false,\n  ...props\n}: BrushStyleSelectorProps) {\n  const [showSettings, setShowSettings] = useState(false);\n  const [hardness, setHardness] = useState(value.hardness ?? 100);\n  const [angle, setAngle] = useState(value.angle ?? 0);\n  const [spacing, setSpacing] = useState(value.spacing ?? 1);\n\n  const getBrushIcon = (style: BrushStyle) => {\n    switch (style) {\n      case \"round\":\n        return Circle;\n      case \"square\":\n        return Square;\n      case \"star\":\n        return Star;\n      default:\n        return Paintbrush;\n    }\n  };\n\n  const handleSizeChange = (newSize: number) => {\n    if (onValueChange && newSize >= minSize && newSize <= maxSize) {\n      onValueChange({ ...value, size: newSize });\n    }\n  };\n\n  const handleOpacityChange = (newOpacity: number) => {\n    if (onValueChange && newOpacity >= 0 && newOpacity <= 1) {\n      onValueChange({ ...value, opacity: newOpacity });\n    }\n  };\n\n  const handleHardnessChange = (newHardness: number) => {\n    setHardness(newHardness);\n    onValueChange?.({ ...value, hardness: newHardness });\n  };\n\n  const handleAngleChange = (newAngle: number) => {\n    setAngle(newAngle);\n    onValueChange?.({ ...value, angle: newAngle });\n  };\n\n  const handleSpacingChange = (newSpacing: number) => {\n    setSpacing(newSpacing);\n    onValueChange?.({ ...value, spacing: newSpacing });\n  };\n\n  const resetAdvancedSettings = () => {\n    handleHardnessChange(100);\n    handleAngleChange(0);\n    handleSpacingChange(1);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col gap-4 rounded-xl border bg-background/95 p-4 shadow-lg backdrop-blur supports-[backdrop-filter]:bg-background/80\",\n        \"dark:border-white/10 dark:bg-black/90 dark:supports-[backdrop-filter]:bg-black/80\",\n        \"transition-colors duration-200\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative\">\n            {React.createElement(getBrushIcon(value.style), {\n              size: Math.min(40, value.size + 15),\n              className: cn(\n                \"text-foreground transition-all duration-200 dark:text-white\",\n                value.color && \"fill-current\",\n              ),\n              style: value.color ? { color: value.color } : undefined,\n            })}\n            {value.hardness && value.hardness < 100 && (\n              <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-transparent to-background/20\" />\n            )}\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"font-medium\">{value.name}</span>\n            <span className=\"text-sm text-muted-foreground\">\n              {value.size}px • {Math.round(value.opacity * 100)}%\n            </span>\n          </div>\n        </div>\n        {showAdvancedControls && (\n          <button\n            onClick={() => setShowSettings(!showSettings)}\n            className=\"h-8 w-8 rounded-md p-1.5 text-muted-foreground hover:text-foreground dark:text-white/50 dark:hover:text-white\"\n          >\n            <Settings2 className=\"h-4 w-4\" />\n          </button>\n        )}\n      </div>\n\n      {showSettings && showAdvancedControls && (\n        <div className=\"space-y-4 border-t pt-4 dark:border-white/10\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n                Hardness\n              </span>\n              <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n                {hardness}%\n              </span>\n            </div>\n            <input\n              type=\"range\"\n              min={0}\n              max={100}\n              value={hardness}\n              onChange={(e) => handleHardnessChange(Number(e.target.value))}\n              className={cn(\n                \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n                \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n                \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n                \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n                \"transition-colors\",\n              )}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n                Angle\n              </span>\n              <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n                {angle}°\n              </span>\n            </div>\n            <input\n              type=\"range\"\n              min={0}\n              max={360}\n              value={angle}\n              onChange={(e) => handleAngleChange(Number(e.target.value))}\n              className={cn(\n                \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n                \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n                \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n                \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n                \"transition-colors\",\n              )}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n                Spacing\n              </span>\n              <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n                {spacing}x\n              </span>\n            </div>\n            <input\n              type=\"range\"\n              min={0.1}\n              max={2}\n              step={0.1}\n              value={spacing}\n              onChange={(e) => handleSpacingChange(Number(e.target.value))}\n              className={cn(\n                \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n                \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n                \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n                \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n                \"transition-colors\",\n              )}\n            />\n          </div>\n\n          <button\n            onClick={resetAdvancedSettings}\n            className={cn(\n              \"flex w-full items-center justify-center gap-2 rounded-md p-2\",\n              \"bg-muted hover:bg-muted/80 dark:bg-white/10 dark:hover:bg-white/20\",\n              \"text-sm font-medium text-foreground/90 dark:text-white/90\",\n              \"transition-colors\",\n            )}\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            Reset Settings\n          </button>\n        </div>\n      )}\n\n      {/* Size and Opacity Controls */}\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Size\n            </span>\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={() =>\n                  handleSizeChange(Math.max(minSize, value.size - 1))\n                }\n                className={cn(\n                  \"flex h-6 w-6 items-center justify-center rounded-md\",\n                  \"bg-muted hover:bg-muted/80 dark:bg-white/10 dark:hover:bg-white/20\",\n                  \"transition-colors\",\n                )}\n                disabled={value.size <= minSize}\n              >\n                <Minus className=\"h-3 w-3\" />\n              </button>\n              <span className=\"min-w-[2.5rem] text-center text-sm text-muted-foreground dark:text-white/50\">\n                {value.size}px\n              </span>\n              <button\n                onClick={() =>\n                  handleSizeChange(Math.min(maxSize, value.size + 1))\n                }\n                className={cn(\n                  \"flex h-6 w-6 items-center justify-center rounded-md\",\n                  \"bg-muted hover:bg-muted/80 dark:bg-white/10 dark:hover:bg-white/20\",\n                  \"transition-colors\",\n                )}\n                disabled={value.size >= maxSize}\n              >\n                <Plus className=\"h-3 w-3\" />\n              </button>\n            </div>\n          </div>\n          <input\n            type=\"range\"\n            min={minSize}\n            max={maxSize}\n            value={value.size}\n            onChange={(e) => handleSizeChange(Number(e.target.value))}\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Opacity\n            </span>\n            <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n              {Math.round(value.opacity * 100)}%\n            </span>\n          </div>\n          <input\n            type=\"range\"\n            min={0}\n            max={1}\n            step={0.01}\n            value={value.opacity}\n            onChange={(e) => handleOpacityChange(Number(e.target.value))}\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n      </div>\n\n      {/* Presets */}\n      {presets.length > 0 && (\n        <div className=\"space-y-2 border-t pt-4 dark:border-white/10\">\n          <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n            Presets\n          </span>\n          <div className=\"grid grid-cols-2 gap-2 sm:grid-cols-3\">\n            {presets.map((preset) => (\n              <button\n                key={preset.id}\n                onClick={() => onValueChange?.(preset)}\n                className={cn(\n                  \"flex flex-col items-center gap-2 rounded-lg border p-3\",\n                  \"hover:bg-muted/50 dark:hover:bg-white/5\",\n                  \"transition-colors\",\n                  value.id === preset.id &&\n                    \"border-primary bg-primary/10 dark:border-white/20 dark:bg-white/10\",\n                )}\n              >\n                <div className=\"relative\">\n                  {React.createElement(getBrushIcon(preset.style), {\n                    size: Math.min(24, preset.size + 10),\n                    className: cn(\n                      \"text-foreground transition-all duration-200 dark:text-white\",\n                      preset.color && \"fill-current\",\n                    ),\n                    style: preset.color ? { color: preset.color } : undefined,\n                  })}\n                  {preset.hardness && preset.hardness < 100 && (\n                    <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-transparent to-background/20 dark:to-white/20\" />\n                  )}\n                </div>\n                <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n                  {preset.name}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}