{
  "name": "artistic-settings-panel",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/artistic-settings-panel.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useTheme } from \"next-themes\";\nimport { cn } from \"@/lib/utils\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Settings2, Moon, Sun, Palette, Wand2 } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport interface ArtisticSettingsPanelProps {\n  className?: string;\n  defaultOpen?: boolean;\n  onSettingsChange?: (settings: ArtisticSettings) => void;\n}\n\ninterface ArtisticSettings {\n  brightness: number;\n  contrast: number;\n  saturation: number;\n  blur: number;\n  isDarkMode: boolean;\n  isAutoEnhance: boolean;\n  preset: string;\n}\n\nconst PRESETS = {\n  default: {\n    brightness: 100,\n    contrast: 100,\n    saturation: 100,\n    blur: 0,\n  },\n  dramatic: {\n    brightness: 110,\n    contrast: 130,\n    saturation: 120,\n    blur: 0,\n  },\n  vintage: {\n    brightness: 95,\n    contrast: 90,\n    saturation: 80,\n    blur: 1,\n  },\n  dreamy: {\n    brightness: 105,\n    contrast: 95,\n    saturation: 90,\n    blur: 2,\n  },\n};\n\nexport default function ArtisticSettingsPanel({\n  className,\n  defaultOpen = false,\n  onSettingsChange,\n}: ArtisticSettingsPanelProps) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n  const { theme, setTheme } = useTheme();\n  const [settings, setSettings] = React.useState<ArtisticSettings>({\n    brightness: 100,\n    contrast: 100,\n    saturation: 100,\n    blur: 0,\n    isDarkMode: theme === \"dark\",\n    isAutoEnhance: false,\n    preset: \"default\",\n  });\n\n  React.useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.key === \"\\\\\") {\n        setIsOpen((prev) => !prev);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\n  }, []);\n\n  React.useEffect(() => {\n    const savedSettings = localStorage.getItem(\"artisticSettings\");\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"artisticSettings\", JSON.stringify(settings));\n  }, [settings]);\n\n  const handleSettingChange = (\n    key: keyof ArtisticSettings,\n    value: number | boolean | string,\n  ) => {\n    const newSettings = { ...settings, [key]: value };\n    if (key === \"preset\" && typeof value === \"string\") {\n      const presetValues = PRESETS[value as keyof typeof PRESETS];\n      Object.assign(newSettings, presetValues);\n    }\n    setSettings(newSettings);\n    onSettingsChange?.(newSettings);\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    handleSettingChange(\"isDarkMode\", newTheme === \"dark\");\n  };\n\n  const getFilterStyle = () => {\n    return {\n      filter: `brightness(${settings.brightness}%) contrast(${settings.contrast}%) saturate(${settings.saturation}%) blur(${settings.blur}px)`,\n    };\n  };\n\n  return (\n    <div className={cn(\"fixed right-4 top-4 z-50\", className)}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"h-10 w-10 rounded-full transition-transform hover:scale-110\"\n            onClick={() => setIsOpen(!isOpen)}\n          >\n            <Settings2 className=\"h-5 w-5\" />\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Open Settings (Ctrl + \\)</p>\n        </TooltipContent>\n      </Tooltip>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, x: 20, scale: 0.95 }}\n            animate={{ opacity: 1, x: 0, scale: 1 }}\n            exit={{ opacity: 0, x: 20, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute right-0 mt-2 w-80\"\n          >\n            <Card className=\"border-2 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Artistic Settings</span>\n                  <Select\n                    value={settings.preset}\n                    onValueChange={(value) =>\n                      handleSettingChange(\"preset\", value)\n                    }\n                  >\n                    <SelectTrigger className=\"w-[120px]\">\n                      <SelectValue placeholder=\"Choose preset\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"default\">Default</SelectItem>\n                      <SelectItem value=\"dramatic\">Dramatic</SelectItem>\n                      <SelectItem value=\"vintage\">Vintage</SelectItem>\n                      <SelectItem value=\"dreamy\">Dreamy</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </CardTitle>\n                <CardDescription>\n                  Customize your artistic experience\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    {theme === \"dark\" ? (\n                      <Moon className=\"h-4 w-4\" />\n                    ) : (\n                      <Sun className=\"h-4 w-4\" />\n                    )}\n                    <span>Theme Mode</span>\n                  </div>\n                  <Switch\n                    checked={settings.isDarkMode}\n                    onCheckedChange={toggleTheme}\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  {[\n                    {\n                      label: \"Brightness\",\n                      key: \"brightness\",\n                      max: 200,\n                      icon: \"☀️\",\n                    },\n                    { label: \"Contrast\", key: \"contrast\", max: 200, icon: \"◐\" },\n                    {\n                      label: \"Saturation\",\n                      key: \"saturation\",\n                      max: 200,\n                      icon: \"🎨\",\n                    },\n                    {\n                      label: \"Blur\",\n                      key: \"blur\",\n                      max: 20,\n                      step: 0.5,\n                      icon: \"○\",\n                    },\n                  ].map((control) => (\n                    <div key={control.key} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <label className=\"text-sm font-medium\">\n                          <span className=\"mr-2\">{control.icon}</span>\n                          {control.label}\n                        </label>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {settings[control.key as keyof ArtisticSettings]}\n                        </span>\n                      </div>\n                      <Slider\n                        value={[\n                          settings[\n                            control.key as keyof ArtisticSettings\n                          ] as number,\n                        ]}\n                        min={0}\n                        max={control.max}\n                        step={control.step || 1}\n                        className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\"\n                        onValueChange={([value]) =>\n                          handleSettingChange(\n                            control.key as keyof ArtisticSettings,\n                            value,\n                          )\n                        }\n                      />\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Wand2 className=\"h-4 w-4\" />\n                    <span>Auto Enhance</span>\n                  </div>\n                  <Switch\n                    checked={settings.isAutoEnhance}\n                    onCheckedChange={(checked) =>\n                      handleSettingChange(\"isAutoEnhance\", checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"mt-4 overflow-hidden rounded-lg border\">\n                  <div\n                    className=\"bg-gradient-to-r from-blue-500 to-purple-500 p-4\"\n                    style={getFilterStyle()}\n                  >\n                    <p className=\"text-center text-white\">Preview Effects</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}