{
  "name": "palette-navigation",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/palette-navigation.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ninterface PaletteItem {\n  label: string;\n  href: string;\n  description?: string;\n  icon?: React.ReactNode;\n  color?: string;\n}\n\ninterface PaletteNavigationProps {\n  items: PaletteItem[];\n  className?: string;\n  layout?: \"flex\" | \"circle\" | \"arc\" | \"line\";\n}\n\nconst defaultColors = [\n  \"from-red-500/80 to-orange-500/80\",\n  \"from-blue-500/80 to-cyan-500/80\",\n  \"from-green-500/80 to-emerald-500/80\",\n  \"from-purple-500/80 to-pink-500/80\",\n  \"from-yellow-500/80 to-amber-500/80\",\n];\n\nexport function PaletteNavigation({\n  items,\n  className,\n  layout = \"flex\",\n}: PaletteNavigationProps) {\n  const getItemPosition = (index: number, total: number) => {\n    switch (layout) {\n      case \"circle\": {\n        const angle = (index * 2 * Math.PI) / total - Math.PI / 2;\n        const radius = 120;\n        return {\n          x: Math.cos(angle) * radius,\n          y: Math.sin(angle) * radius,\n        };\n      }\n      case \"arc\": {\n        // Create a 180-degree arc (π radians)\n        const angleSpacing = Math.PI / (total - 1);\n        // Start from -90 degrees (-π/2) to center the arc\n        const startAngle = -Math.PI / 2;\n        const angle = startAngle + index * angleSpacing;\n        // Increase radius for better spacing\n        const radius = 160;\n        // Adjust y position to create a proper semi-circle\n        return {\n          x: Math.cos(angle) * radius,\n          y: Math.sin(angle) * radius + radius,\n        };\n      }\n      case \"line\": {\n        const spacing = 100;\n        const totalWidth = (total - 1) * spacing;\n        const startX = -totalWidth / 2;\n        return {\n          x: startX + index * spacing,\n          y: 0,\n        };\n      }\n      default:\n        return { x: 0, y: 0 };\n    }\n  };\n\n  const containerStyles = cn(\n    \"relative\",\n    layout === \"flex\" &&\n      \"flex h-[400px] flex-wrap items-center justify-center gap-4 rounded-full p-4\",\n    layout === \"arc\" && \"flex h-[600px] items-start justify-center pt-16\",\n    layout !== \"flex\" &&\n      layout !== \"arc\" &&\n      \"flex h-[400px] items-center justify-center\",\n    \"before:absolute before:inset-0 before:-z-10 before:rounded-full before:bg-white/10 before:backdrop-blur-md dark:before:bg-zinc-950/10\",\n    \"after:absolute after:inset-0 after:-z-20 after:rounded-full after:bg-gradient-to-r after:from-primary/5 after:to-muted/5\",\n    className,\n  );\n\n  return (\n    <TooltipProvider>\n      <nav className={containerStyles}>\n        {items.map((item, index) => {\n          const position =\n            layout !== \"flex\"\n              ? getItemPosition(index, items.length)\n              : undefined;\n\n          return (\n            <motion.div\n              key={item.href}\n              className={layout !== \"flex\" ? \"absolute\" : undefined}\n              initial={\n                position\n                  ? { opacity: 0, scale: 0, x: position.x, y: position.y }\n                  : { opacity: 0, scale: 0 }\n              }\n              animate={{\n                opacity: 1,\n                scale: 1,\n                ...(position && { x: position.x, y: position.y }),\n              }}\n              transition={{\n                type: \"spring\",\n                stiffness: 300,\n                damping: 25,\n                delay: index * 0.05,\n              }}\n            >\n              <PaletteItem\n                item={item}\n                colorClass={\n                  item.color || defaultColors[index % defaultColors.length]\n                }\n                layout={layout}\n                index={index}\n                total={items.length}\n              />\n            </motion.div>\n          );\n        })}\n      </nav>\n    </TooltipProvider>\n  );\n}\n\ninterface PaletteItemProps {\n  item: PaletteItem;\n  colorClass: string;\n  layout?: \"flex\" | \"circle\" | \"arc\" | \"line\";\n  index?: number;\n  total?: number;\n}\n\nfunction PaletteItem({\n  item,\n  colorClass,\n  layout = \"flex\",\n  index = 0,\n  total = 1,\n}: PaletteItemProps) {\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  const getTooltipSide = () => {\n    if (layout === \"arc\") {\n      const angleSpacing = Math.PI / (total - 1);\n      const startAngle = -Math.PI / 2;\n      const angle = startAngle + index * angleSpacing;\n      return angle < 0 ? \"bottom\" : \"top\";\n    }\n\n    if (layout === \"circle\") {\n      const angle = (index * 2 * Math.PI) / total - Math.PI / 2;\n      const direction = {\n        x: Math.cos(angle),\n        y: Math.sin(angle),\n      };\n\n      if (Math.abs(direction.x) > Math.abs(direction.y)) {\n        return direction.x > 0 ? \"right\" : \"left\";\n      }\n      return direction.y > 0 ? \"bottom\" : \"top\";\n    }\n\n    return \"bottom\";\n  };\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Link\n          href={item.href}\n          className=\"group relative\"\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          <motion.div\n            className={cn(\n              \"relative flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br shadow-lg transition-shadow\",\n              \"hover:shadow-xl hover:ring-2 hover:ring-white/20 dark:hover:ring-zinc-800/20\",\n              colorClass,\n            )}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            {item.icon && (\n              <div className=\"text-white dark:text-zinc-200\">{item.icon}</div>\n            )}\n            {!item.icon && (\n              <span className=\"text-sm font-medium text-white dark:text-zinc-200\">\n                {item.label.charAt(0)}\n              </span>\n            )}\n\n            {/* Paint drip effect */}\n            {/* <motion.div\n              className={cn(\n                \"absolute -bottom-6 left-1/2 w-1 -translate-x-1/2 rounded-full bg-gradient-to-b\",\n                colorClass,\n              )}\n              initial={{ height: 0, opacity: 0 }}\n              animate={{\n                height: isHovered ? \"2rem\" : 0,\n                opacity: isHovered ? 0.8 : 0,\n              }}\n              transition={{\n                duration: 0.3,\n                ease: \"easeOut\",\n              }}\n              style={{\n                transformOrigin: \"top\",\n              }}\n            /> */}\n          </motion.div>\n        </Link>\n      </TooltipTrigger>\n      <TooltipContent\n        side={getTooltipSide()}\n        className=\"flex flex-col gap-1 bg-white text-foreground dark:bg-zinc-900\"\n        sideOffset={8}\n      >\n        <div className=\"whitespace-nowrap font-medium\">{item.label}</div>\n        {item.description && (\n          <div className=\"text-xs text-muted-foreground\">\n            {item.description}\n          </div>\n        )}\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}