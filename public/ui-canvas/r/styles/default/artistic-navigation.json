{
  "name": "artistic-navigation",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/artistic-navigation.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { motion, useScroll, useTransform, useSpring } from \"framer-motion\";\n\ninterface NavItem {\n  label: string;\n  href: string;\n  icon?: React.ReactNode;\n}\n\ninterface ArtisticNavigationProps {\n  items: NavItem[];\n  className?: string;\n}\n\nexport default function ArtisticNavigation({\n  items,\n  className = \"\",\n}: ArtisticNavigationProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const itemRefs = useRef<(HTMLLIElement | null)[]>([]);\n  const { scrollYProgress } = useScroll();\n\n  const brushStrokeScale = useTransform(\n    scrollYProgress,\n    [0, 0.5, 1],\n    [1, 1.1, 1.05],\n  );\n  const brushStrokeRotate = useTransform(\n    scrollYProgress,\n    [0, 0.5, 1],\n    [0, 5, -2],\n  );\n  const backgroundOpacity = useTransform(\n    scrollYProgress,\n    [0, 0.5, 1],\n    [0.15, 0.2, 0.25],\n  );\n  const navScale = useTransform(scrollYProgress, [0, 0.5, 1], [1, 1.02, 1]);\n  const navY = useTransform(scrollYProgress, [0, 0.5, 1], [0, -4, -2]);\n  const blurStrength = useTransform(scrollYProgress, [0, 1], [0, 2]);\n\n  const floatingAnimation = {\n    y: [0, -8, 0],\n    rotate: [0, 0.5, 0],\n    scale: [1, 1.02, 1],\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        ease: [0.22, 1, 0.36, 1],\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 10 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: [0.22, 1, 0.36, 1],\n      },\n    },\n  };\n\n  const inkDropVariants = {\n    initial: {\n      scale: 0,\n      opacity: 0,\n      filter: \"blur(0px)\",\n    },\n    animate: {\n      scale: 1,\n      opacity: [0, 0.8, 0],\n      filter: \"blur(10px)\",\n      transition: {\n        scale: { duration: 0.8, ease: [0.22, 1, 0.36, 1] },\n        opacity: { duration: 1.2, times: [0, 0.2, 1] },\n        filter: { duration: 0.8 },\n      },\n    },\n    exit: {\n      scale: 1.2,\n      opacity: 0,\n      filter: \"blur(20px)\",\n      transition: { duration: 0.5 },\n    },\n  };\n\n  const springConfig = { stiffness: 150, damping: 15 };\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [rotateX, setRotateX] = useState(0);\n  const [rotateY, setRotateY] = useState(0);\n\n  const springX = useSpring(x, springConfig);\n  const springY = useSpring(y, springConfig);\n  const springRotateX = useSpring(rotateX, springConfig);\n  const springRotateY = useSpring(rotateY, springConfig);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      setMousePosition({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n      });\n    };\n\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n      return () => container.removeEventListener(\"mousemove\", handleMouseMove);\n    }\n  }, []);\n\n  const getMagneticValues = (index: number) => {\n    if (!itemRefs.current[index] || hoveredIndex !== index)\n      return { x: 0, y: 0, rotateX: 0, rotateY: 0 };\n\n    const rect = itemRefs.current[index]!.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n\n    const deltaX = mousePosition.x - centerX;\n    const deltaY = mousePosition.y - centerY;\n\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const maxDistance = 100;\n\n    if (distance > maxDistance) return { x: 0, y: 0, rotateX: 0, rotateY: 0 };\n\n    const strength = (maxDistance - distance) / maxDistance;\n\n    return {\n      x: deltaX * 0.2 * strength,\n      y: deltaY * 0.2 * strength,\n      rotateX: (deltaY / maxDistance) * 20 * strength,\n      rotateY: -(deltaX / maxDistance) * 20 * strength,\n    };\n  };\n\n  return (\n    <motion.nav\n      ref={containerRef}\n      className={`fixed inset-x-0 top-4 z-50 mx-auto max-w-2xl py-3${className}`}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      style={{ y: navY }}\n    >\n      <motion.div\n        className=\"absolute -inset-6 rounded-2xl bg-background/20 backdrop-blur-xl dark:bg-background/10\"\n        animate={floatingAnimation}\n        transition={{\n          duration: 6,\n          repeat: Infinity,\n          repeatType: \"mirror\",\n          ease: \"easeInOut\",\n        }}\n      />\n\n      <motion.div\n        className=\"bg-gradient-radial absolute -inset-2 rounded-xl from-primary/20 via-primary/5 to-transparent opacity-75 dark:from-primary/10 dark:via-primary/5\"\n        animate={{\n          ...floatingAnimation,\n          opacity: [0.5, 0.7, 0.5],\n        }}\n        transition={{\n          duration: 8,\n          repeat: Infinity,\n          repeatType: \"mirror\",\n          ease: \"easeInOut\",\n        }}\n      />\n\n      <motion.div\n        className=\"absolute -inset-[1px] rounded-xl\"\n        style={{\n          background:\n            \"linear-gradient(45deg, transparent, var(--primary), transparent)\",\n          opacity: 0.1,\n          filter: \"blur(1px)\",\n        }}\n        animate={{\n          backgroundPosition: [\"0% 0%\", \"100% 100%\", \"0% 0%\"],\n        }}\n        transition={{\n          duration: 15,\n          repeat: Infinity,\n          ease: \"linear\",\n        }}\n      />\n\n      <motion.div\n        className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-background/90 via-background/70 to-background/90 backdrop-blur-[1px] dark:from-background/80 dark:via-background/60 dark:to-background/80\"\n        style={{\n          scale: brushStrokeScale,\n          rotate: brushStrokeRotate,\n          opacity: backgroundOpacity,\n          filter: `blur(${blurStrength}px)`,\n        }}\n      />\n\n      <motion.div\n        className=\"absolute inset-x-0 top-0 h-px bg-gradient-to-r from-transparent via-primary/30 to-transparent dark:via-primary/20\"\n        style={{ opacity: backgroundOpacity }}\n        animate={{\n          opacity: [0.2, 0.4, 0.2],\n        }}\n        transition={{\n          duration: 4,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n      />\n\n      <motion.ul\n        className=\"relative flex items-center justify-center gap-12\"\n        style={{ scale: navScale }}\n      >\n        {items.map((item, index) => {\n          const magneticValues = getMagneticValues(index);\n\n          return (\n            <motion.li\n              key={item.label}\n              ref={(el) => (itemRefs.current[index] = el)}\n              variants={itemVariants}\n              onMouseEnter={() => {\n                setX(magneticValues.x);\n                setY(magneticValues.y);\n                setRotateX(magneticValues.rotateX);\n                setRotateY(magneticValues.rotateY);\n                setHoveredIndex(index);\n              }}\n              onMouseLeave={() => {\n                setX(0);\n                setY(0);\n                setRotateX(0);\n                setRotateY(0);\n                setHoveredIndex(null);\n              }}\n              style={{\n                x: springX,\n                y: springY,\n                rotateX: springRotateX,\n                rotateY: springRotateY,\n              }}\n              initial=\"rest\"\n              whileHover=\"hover\"\n              animate={hoveredIndex === index ? \"hover\" : \"rest\"}\n            >\n              <motion.a\n                href={item.href}\n                className=\"group relative flex flex-col items-center gap-3 text-foreground/70 transition-colors hover:text-foreground dark:text-foreground/60 dark:hover:text-foreground\"\n                whileHover={{\n                  scale: 1.1,\n                  transition: { type: \"spring\", stiffness: 400, damping: 10 },\n                }}\n              >\n                {hoveredIndex === index && (\n                  <motion.div\n                    className=\"absolute -inset-4 rounded-full bg-primary/20\"\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={inkDropVariants}\n                    style={{\n                      background: `radial-gradient(circle, var(--primary) 0%, transparent 70%)`,\n                    }}\n                  />\n                )}\n                {item.icon && (\n                  <motion.div\n                    className=\"relative text-2xl\"\n                    style={{\n                      transformStyle: \"preserve-3d\",\n                    }}\n                  >\n                    {item.icon}\n                  </motion.div>\n                )}\n                <span className=\"relative text-sm font-medium tracking-wide\">\n                  {item.label}\n                </span>\n              </motion.a>\n            </motion.li>\n          );\n        })}\n      </motion.ul>\n    </motion.nav>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}