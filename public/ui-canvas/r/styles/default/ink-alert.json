{
  "name": "ink-alert",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/ink-alert.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nconst positionVariants = {\n  \"top-right\": \"top-4 right-4\",\n  \"top-left\": \"top-4 left-4\",\n  \"bottom-right\": \"bottom-4 right-4\",\n  \"bottom-left\": \"bottom-4 left-4\",\n  \"top-center\": \"top-4 left-1/2 -translate-x-1/2\",\n  \"bottom-center\": \"bottom-4 left-1/2 -translate-x-1/2\",\n} as const;\n\nconst inkAlertVariants = cva(\n  \"ease-[cubic-bezier(0.4,0,0.2,1)] fixed w-full max-w-md p-4 text-sm shadow-lg backdrop-blur-[2px] transition-all duration-300 [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"rounded-lg border border-blue-500/20 bg-gradient-to-r from-blue-500/80 via-blue-500/70 to-blue-600/60 text-primary-foreground dark:from-blue-400/70 dark:via-blue-400/60 dark:to-blue-500/50\",\n        destructive:\n          \"rounded-lg border border-red-500/20 bg-gradient-to-r from-red-500/80 via-red-500/70 to-red-600/60 text-destructive-foreground dark:from-red-400/70 dark:via-red-400/60 dark:to-red-500/50\",\n        success:\n          \"text-success-foreground rounded-lg border border-green-500/20 bg-gradient-to-r from-green-500/80 via-green-500/70 to-green-600/60 dark:from-green-400/70 dark:via-green-400/60 dark:to-green-500/50\",\n        warning:\n          \"text-warning-foreground rounded-lg border border-yellow-500/20 bg-gradient-to-r from-yellow-500/80 via-yellow-500/70 to-yellow-600/60 dark:from-yellow-400/70 dark:via-yellow-400/60 dark:to-yellow-500/50\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst enterAnimationVariants = {\n  \"top-right\": \"translate-x-[120%] opacity-0\",\n  \"top-left\": \"translate-x-[-120%] opacity-0\",\n  \"bottom-right\": \"translate-x-[120%] opacity-0\",\n  \"bottom-left\": \"translate-x-[-120%] opacity-0\",\n  \"top-center\": \"translate-y-[-120%] opacity-0\",\n  \"bottom-center\": \"translate-y-[120%] opacity-0\",\n};\n\nconst exitAnimationVariants = {\n  \"top-right\": \"translate-x-[120%] opacity-0\",\n  \"top-left\": \"translate-x-[-120%] opacity-0\",\n  \"bottom-right\": \"translate-x-[120%] opacity-0\",\n  \"bottom-left\": \"translate-x-[-120%] opacity-0\",\n  \"top-center\": \"translate-y-[-120%] opacity-0\",\n  \"bottom-center\": \"translate-y-[120%] opacity-0\",\n};\n\nexport interface InkAlertProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof inkAlertVariants> {\n  onClose?: () => void;\n  duration?: number;\n  position?: keyof typeof positionVariants;\n}\n\nexport default function InkAlert({\n  className,\n  variant,\n  children,\n  onClose,\n  duration,\n  position = \"top-right\",\n  ...props\n}: InkAlertProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isRemoving, setIsRemoving] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n\n  const handleClose = useCallback(() => {\n    if (isRemoving) return; // Prevent multiple close attempts\n    setIsRemoving(true);\n    setIsVisible(false);\n    const timeout = setTimeout(() => {\n      setIsMounted(false);\n      onClose?.();\n    }, 300);\n    return () => clearTimeout(timeout);\n  }, [isRemoving, onClose]);\n\n  useEffect(() => {\n    let enterTimeout: number;\n    let durationTimeout: number;\n\n    // Mount and start enter animation\n    enterTimeout = window.setTimeout(() => {\n      setIsMounted(true);\n      window.requestAnimationFrame(() => {\n        setIsVisible(true);\n      });\n    }, 0);\n\n    // Set up duration-based auto-close if specified\n    if (duration && duration > 0) {\n      durationTimeout = window.setTimeout(() => {\n        handleClose();\n      }, duration);\n    }\n\n    // Cleanup function\n    return () => {\n      window.clearTimeout(enterTimeout);\n      window.clearTimeout(durationTimeout);\n    };\n  }, [duration, handleClose]);\n\n  // Don't render if not mounted\n  if (!isMounted) return null;\n\n  return (\n    <div\n      className={cn(\n        inkAlertVariants({ variant }),\n        \"ink-flow\",\n        positionVariants[position],\n        enterAnimationVariants[position],\n        isVisible && \"translate-x-0 translate-y-0 opacity-100\",\n        isRemoving && exitAnimationVariants[position],\n        className,\n      )}\n      {...props}\n    >\n      {onClose && (\n        <button\n          className=\"absolute right-3 top-3 rounded-full p-1.5 opacity-70 ring-offset-background transition-all hover:bg-white/10 hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n          onClick={handleClose}\n          type=\"button\"\n          aria-label=\"Close alert\"\n        >\n          <X className=\"h-3.5 w-3.5\" />\n          <span className=\"sr-only\">Close</span>\n        </button>\n      )}\n      {children}\n      <div\n        className=\"absolute inset-0 -z-10\"\n        style={{\n          background: `radial-gradient(circle at ${Math.random() * 100}% ${\n            Math.random() * 100\n          }%, rgba(255,255,255,0.12) 0%, transparent 50%)`,\n        }}\n      />\n      <div className=\"absolute inset-0 -z-20 rounded-lg bg-black/5 dark:bg-white/5\" />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}