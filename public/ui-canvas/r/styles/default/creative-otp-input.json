{
  "name": "creative-otp-input",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/creative-otp-input.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ntype Variant = \"default\" | \"neon\" | \"minimal\" | \"dots\" | \"underline\";\ntype Status = \"idle\" | \"success\" | \"error\";\n\ninterface CreativeOTPInputProps {\n  length?: number;\n  onComplete?: (otp: string) => void;\n  className?: string;\n  variant?: Variant;\n  status?: Status;\n}\n\nconst variants = {\n  default: {\n    input: {\n      base: \"h-16 w-12 rounded-lg text-center text-2xl font-bold border-2 transition-all duration-200\",\n      idle: \"border-muted-foreground/20 dark:border-muted-foreground/10 bg-background dark:bg-background/80 focus:border-primary dark:focus:border-primary\",\n      success:\n        \"border-green-500 dark:border-green-400 bg-green-50 dark:bg-green-950/30 text-green-600 dark:text-green-400\",\n      error:\n        \"border-red-500 dark:border-red-400 bg-red-50 dark:bg-red-950/30 text-red-600 dark:text-red-400\",\n    },\n    container: \"gap-2\",\n    indicator: {\n      idle: \"-right-1 -top-1 h-3 w-3 rounded-full bg-primary dark:bg-primary\",\n      success:\n        \"-right-1 -top-1 h-3 w-3 rounded-full bg-green-500 dark:bg-green-400\",\n      error: \"-right-1 -top-1 h-3 w-3 rounded-full bg-red-500 dark:bg-red-400\",\n    },\n  },\n  neon: {\n    input: {\n      base: \"h-16 w-12 rounded-lg text-center text-2xl font-bold border-2 transition-all duration-300\",\n      idle: \"border-primary/50 bg-primary/5 dark:border-primary/30 dark:bg-primary/10 shadow-[0_0_15px_rgba(var(--primary)/0.2)] dark:shadow-[0_0_15px_rgba(var(--primary)/0.3)] focus:border-primary focus:shadow-[0_0_25px_rgba(var(--primary)/0.5)] dark:focus:shadow-[0_0_25px_rgba(var(--primary)/0.6)]\",\n      success:\n        \"border-green-500/50 dark:border-green-400/30 bg-green-500/5 dark:bg-green-400/10 shadow-[0_0_15px_rgba(34,197,94,0.2)] dark:shadow-[0_0_15px_rgba(74,222,128,0.3)] text-green-600 dark:text-green-400\",\n      error:\n        \"border-red-500/50 dark:border-red-400/30 bg-red-500/5 dark:bg-red-400/10 shadow-[0_0_15px_rgba(239,68,68,0.2)] dark:shadow-[0_0_15px_rgba(248,113,113,0.3)] text-red-600 dark:text-red-400\",\n    },\n    container: \"gap-4\",\n    indicator: {\n      idle: \"right-0 top-0 h-full w-full rounded-lg bg-primary/10 dark:bg-primary/20\",\n      success:\n        \"right-0 top-0 h-full w-full rounded-lg bg-green-500/10 dark:bg-green-400/20\",\n      error:\n        \"right-0 top-0 h-full w-full rounded-lg bg-red-500/10 dark:bg-red-400/20\",\n    },\n  },\n  minimal: {\n    input: {\n      base: \"h-14 w-10 rounded-md text-center text-xl font-medium border-b-2 transition-all duration-200 bg-transparent\",\n      idle: \"border-muted-foreground/20 dark:border-muted-foreground/10 focus:border-primary\",\n      success:\n        \"border-green-500 dark:border-green-400 text-green-600 dark:text-green-400\",\n      error:\n        \"border-red-500 dark:border-red-400 text-red-600 dark:text-red-400\",\n    },\n    container: \"gap-3\",\n    indicator: {\n      idle: \"bottom-0 left-0 h-0.5 w-full bg-primary dark:bg-primary\",\n      success: \"bottom-0 left-0 h-0.5 w-full bg-green-500 dark:bg-green-400\",\n      error: \"bottom-0 left-0 h-0.5 w-full bg-red-500 dark:bg-red-400\",\n    },\n  },\n  dots: {\n    input: {\n      base: \"h-12 w-12 rounded-full text-center text-xl font-bold border-2 transition-all duration-200\",\n      idle: \"border-muted-foreground/20 dark:border-muted-foreground/10 bg-background dark:bg-background/80 focus:border-primary\",\n      success:\n        \"border-green-500 dark:border-green-400 bg-green-50 dark:bg-green-950/30 text-green-600 dark:text-green-400\",\n      error:\n        \"border-red-500 dark:border-red-400 bg-red-50 dark:bg-red-950/30 text-red-600 dark:text-red-400\",\n    },\n    container: \"gap-4\",\n    indicator: {\n      idle: \"left-1/2 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 rounded-full bg-primary/20 dark:bg-primary/30\",\n      success:\n        \"left-1/2 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 rounded-full bg-green-500/20 dark:bg-green-400/30\",\n      error:\n        \"left-1/2 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 rounded-full bg-red-500/20 dark:bg-red-400/30\",\n    },\n  },\n  underline: {\n    input: {\n      base: \"h-16 w-12 text-center text-2xl font-bold border-b-4 transition-all duration-200 bg-transparent\",\n      idle: \"border-muted-foreground/20 dark:border-muted-foreground/10 focus:border-primary\",\n      success:\n        \"border-green-500 dark:border-green-400 text-green-600 dark:text-green-400\",\n      error:\n        \"border-red-500 dark:border-red-400 text-red-600 dark:text-red-400\",\n    },\n    container: \"gap-6\",\n    indicator: {\n      idle: \"bottom-0 left-0 h-1 w-full bg-primary dark:bg-primary\",\n      success: \"bottom-0 left-0 h-1 w-full bg-green-500 dark:bg-green-400\",\n      error: \"bottom-0 left-0 h-1 w-full bg-red-500 dark:bg-red-400\",\n    },\n  },\n};\n\nexport default function CreativeOTPInput({\n  length = 6,\n  onComplete,\n  className,\n  variant = \"default\",\n  status = \"idle\",\n}: CreativeOTPInputProps) {\n  const [otp, setOtp] = useState<string[]>(Array(length).fill(\"\"));\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n  const [focusedIndex, setFocusedIndex] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (inputRefs.current[0]) {\n      inputRefs.current[0].focus();\n    }\n  }, []);\n\n  const handleChange = (index: number, value: string) => {\n    if (isNaN(Number(value))) return;\n\n    const newOtp = [...otp];\n    newOtp[index] = value.slice(-1);\n    setOtp(newOtp);\n\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n\n    if (newOtp.every((val) => val !== \"\") && onComplete) {\n      onComplete(newOtp.join(\"\"));\n    }\n  };\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (e.key === \"Backspace\" && !otp[index] && index > 0) {\n      inputRefs.current[index - 1]?.focus();\n    }\n  };\n\n  const handlePaste = (e: React.ClipboardEvent) => {\n    e.preventDefault();\n    const pastedData = e.clipboardData.getData(\"text\").slice(0, length);\n    const newOtp = [...otp];\n\n    pastedData.split(\"\").forEach((char, index) => {\n      if (index < length && !isNaN(Number(char))) {\n        newOtp[index] = char;\n      }\n    });\n\n    setOtp(newOtp);\n\n    if (newOtp.every((val) => val !== \"\") && onComplete) {\n      onComplete(newOtp.join(\"\"));\n    }\n  };\n\n  const getInputAnimation = (index: number) => {\n    const baseAnimation = {\n      scale: focusedIndex === index ? 1.1 : 1,\n    };\n\n    switch (variant) {\n      case \"neon\":\n        return {\n          ...baseAnimation,\n          boxShadow:\n            focusedIndex === index\n              ? status === \"success\"\n                ? \"0 0 25px rgba(34,197,94,0.5)\"\n                : status === \"error\"\n                  ? \"0 0 25px rgba(239,68,68,0.5)\"\n                  : \"0 0 25px rgba(var(--primary)/0.5)\"\n              : undefined,\n        };\n      case \"dots\":\n        return {\n          ...baseAnimation,\n          rotate: focusedIndex === index ? [0, -10, 10, 0] : 0,\n        };\n      case \"minimal\":\n        return {\n          y: focusedIndex === index ? -2 : 0,\n        };\n      case \"underline\":\n        return {\n          borderBottomWidth: focusedIndex === index ? \"6px\" : \"4px\",\n        };\n      default:\n        return {\n          ...baseAnimation,\n          rotate: focusedIndex === index ? [0, -2, 2, 0] : 0,\n        };\n    }\n  };\n\n  return (\n    <div className={cn(\"flex flex-col items-center\", className)}>\n      <div className={cn(\"flex\", variants[variant].container)}>\n        {otp.map((digit, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, scale: 0.5 }}\n            animate={{\n              opacity: 1,\n              scale: 1,\n              ...getInputAnimation(index),\n            }}\n            transition={{\n              duration: 0.2,\n              delay: index * 0.05,\n            }}\n            className=\"relative\"\n          >\n            <input\n              ref={(el) => (inputRefs.current[index] = el)}\n              type=\"text\"\n              inputMode=\"numeric\"\n              maxLength={1}\n              value={digit}\n              onChange={(e) => handleChange(index, e.target.value)}\n              onKeyDown={(e) => handleKeyDown(index, e)}\n              onPaste={handlePaste}\n              onFocus={() => setFocusedIndex(index)}\n              onBlur={() => setFocusedIndex(null)}\n              className={cn(\n                variants[variant].input.base,\n                variants[variant].input[status],\n                \"focus:outline-none\",\n              )}\n            />\n            <AnimatePresence>\n              {digit && (\n                <motion.div\n                  initial={{ scale: 0, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  exit={{ scale: 0, opacity: 0 }}\n                  className={cn(\n                    \"absolute\",\n                    variants[variant].indicator[status],\n                  )}\n                />\n              )}\n            </AnimatePresence>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}