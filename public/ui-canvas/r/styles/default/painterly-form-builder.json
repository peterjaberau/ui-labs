{
  "name": "painterly-form-builder",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "ui-canvas/painterly-form-builder.tsx",
      "content": "\"use client\"\n\nimport React from 'react'\nimport * as z from 'zod'\nimport { cn } from '@/lib/utils'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm, UseFormReturn, FieldValues, Path, RegisterOptions, DefaultValues } from 'react-hook-form'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nconst formFieldVariants = cva(\n  'w-full rounded-md border px-3 py-2 transition-all duration-200 focus:outline-none focus:ring-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-gray-300 focus:ring-blue-500',\n        error: 'border-red-500 focus:ring-red-500',\n        success: 'border-green-500 focus:ring-green-500',\n      },\n      size: {\n        default: 'h-10',\n        sm: 'h-8 text-sm',\n        lg: 'h-12 text-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nexport interface InputProps<T extends FieldValues> extends VariantProps<typeof formFieldVariants> {\n  label?: string\n  name: Path<T>\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'date' | 'textarea' | 'select'\n  placeholder?: string\n  className?: string\n  validation?: RegisterOptions\n  options?: { label: string; value: string | number }[]\n  form: UseFormReturn<T>\n  description?: string\n  required?: boolean\n}\n\nexport interface PainterlyFormBuilderProps<T extends FieldValues> {\n  children: React.ReactNode\n  className?: string\n  onSubmit: (data: T) => void\n  schema?: z.ZodType<T>\n  defaultValues?: DefaultValues<T>\n}\n\nconst Input = <T extends FieldValues>({\n  label,\n  name,\n  type = 'text',\n  placeholder,\n  className,\n  validation,\n  options,\n  form,\n  description,\n  required,\n  variant,\n  size,\n}: InputProps<T>) => {\n  const { register, formState: { errors } } = form\n  const error = errors[name]\n  const fieldVariant = error ? 'error' : variant\n\n  const renderField = () => {\n    switch (type) {\n      case 'textarea':\n        return (\n          <textarea\n            {...register(name, { ...validation, required })}\n            placeholder={placeholder}\n            className={cn(\n              formFieldVariants({ variant: fieldVariant, size }),\n              'resize-vertical min-h-[100px]',\n              className\n            )}\n          />\n        )\n      case 'select':\n        return (\n          <select\n            {...register(name, { ...validation, required })}\n            className={cn(formFieldVariants({ variant: fieldVariant, size }), className)}\n          >\n            {options?.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        )\n      default:\n        return (\n          <input\n            type={type}\n            {...register(name, { ...validation, required })}\n            placeholder={placeholder}\n            className={cn(formFieldVariants({ variant: fieldVariant, size }), className)}\n          />\n        )\n    }\n  }\n\n  return (\n    <div className=\"mb-4\">\n      {label && (\n        <label className=\"mb-1 block text-sm font-medium\">\n          {label}\n          {required && <span className=\"ml-1 text-red-500\">*</span>}\n        </label>\n      )}\n      {renderField()}\n      {description && (\n        <p className=\"mt-1 text-sm text-gray-500\">{description}</p>\n      )}\n      {error && (\n        <p className=\"mt-1 text-sm text-red-500\">\n          {error.message?.toString()}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default function PainterlyFormBuilder<T extends FieldValues>({\n  children,\n  className,\n  onSubmit,\n  schema,\n  defaultValues,\n}: PainterlyFormBuilderProps<T>) {\n  const form = useForm<T>({\n    resolver: schema ? zodResolver(schema) : undefined,\n    defaultValues,\n  })\n\n  return (\n    <form\n      className={cn(\n        'rounded-lg border border-gray-200 bg-white p-6 shadow-md',\n        'dark:border-gray-700 dark:bg-gray-800',\n        className\n      )}\n      onSubmit={form.handleSubmit(onSubmit)}\n    >\n      {React.Children.map(children, child => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child, { form } as any)\n        }\n        return child\n      })}\n    </form>\n  )\n}\n\nPainterlyFormBuilder.Input = Input\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}