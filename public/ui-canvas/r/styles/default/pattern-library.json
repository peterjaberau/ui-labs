{
  "name": "pattern-library",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/pattern-library.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Grid,\n  Circle,\n  Square,\n  Triangle,\n  Hash,\n  Plus,\n  Minus,\n  Trash2,\n  RefreshCw,\n  Diamond,\n} from \"lucide-react\";\n\nexport type PatternType =\n  | \"dots\"\n  | \"grid\"\n  | \"lines\"\n  | \"circles\"\n  | \"squares\"\n  | \"triangles\"\n  | \"diamonds\";\n\nexport interface Pattern {\n  id: string;\n  name: string;\n  type: PatternType;\n  size: number;\n  spacing: number;\n  rotation: number;\n  opacity: number;\n  color: string;\n}\n\nexport interface PatternLibraryProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  value?: Pattern;\n  patterns?: Pattern[];\n  onValueChange?: (pattern: Pattern) => void;\n  onPatternsChange?: (patterns: Pattern[]) => void;\n  minSize?: number;\n  maxSize?: number;\n}\n\nconst defaultPatterns: Pattern[] = [\n  {\n    id: \"1\",\n    name: \"Dots Grid\",\n    type: \"dots\",\n    size: 4,\n    spacing: 20,\n    rotation: 0,\n    opacity: 0.5,\n    color: \"#94a3b8\",\n  },\n  {\n    id: \"2\",\n    name: \"Square Grid\",\n    type: \"grid\",\n    size: 1,\n    spacing: 20,\n    rotation: 0,\n    opacity: 0.3,\n    color: \"#64748b\",\n  },\n  {\n    id: \"3\",\n    name: \"Diagonal Lines\",\n    type: \"lines\",\n    size: 1,\n    spacing: 10,\n    rotation: 45,\n    opacity: 0.4,\n    color: \"#475569\",\n  },\n  {\n    id: \"4\",\n    name: \"Circles\",\n    type: \"circles\",\n    size: 8,\n    spacing: 24,\n    rotation: 0,\n    opacity: 0.3,\n    color: \"#6366f1\",\n  },\n];\n\nconst getPatternIcon = (type: PatternType) => {\n  switch (type) {\n    case \"dots\":\n      return Hash;\n    case \"grid\":\n      return Grid;\n    case \"lines\":\n      return Minus;\n    case \"circles\":\n      return Circle;\n    case \"squares\":\n      return Square;\n    case \"triangles\":\n      return Triangle;\n    case \"diamonds\":\n      return Diamond;\n    default:\n      return Square;\n  }\n};\n\nconst Icon = ({ type, size, className, style }: any) => {\n  const IconComponent = getPatternIcon(type);\n  return <IconComponent size={size} className={className} style={style} />;\n};\n\nexport default function PatternLibrary({\n  value,\n  patterns = defaultPatterns,\n  onValueChange,\n  onPatternsChange,\n  minSize = 1,\n  maxSize = 20,\n  className,\n  ...props\n}: PatternLibraryProps) {\n  const [selectedPattern, setSelectedPattern] = useState<Pattern | undefined>(\n    value || patterns[0],\n  );\n\n  const handlePatternChange = (pattern: Pattern) => {\n    setSelectedPattern(pattern);\n    onValueChange?.(pattern);\n  };\n\n  const handleSizeChange = (size: number) => {\n    if (!selectedPattern) return;\n    const updatedPattern = { ...selectedPattern, size };\n    handlePatternChange(updatedPattern);\n  };\n\n  const handleSpacingChange = (spacing: number) => {\n    if (!selectedPattern) return;\n    const updatedPattern = { ...selectedPattern, spacing };\n    handlePatternChange(updatedPattern);\n  };\n\n  const handleRotationChange = (rotation: number) => {\n    if (!selectedPattern) return;\n    const updatedPattern = { ...selectedPattern, rotation };\n    handlePatternChange(updatedPattern);\n  };\n\n  const handleOpacityChange = (opacity: number) => {\n    if (!selectedPattern) return;\n    const updatedPattern = { ...selectedPattern, opacity };\n    handlePatternChange(updatedPattern);\n  };\n\n  const handleDeletePattern = (patternId: string) => {\n    const updatedPatterns = patterns.filter((p) => p.id !== patternId);\n    onPatternsChange?.(updatedPatterns);\n  };\n\n  const handleDuplicatePattern = (pattern: Pattern) => {\n    const newPattern = {\n      ...pattern,\n      id: Math.random().toString(36).substr(2, 9),\n      name: `${pattern.name} Copy`,\n    };\n    const updatedPatterns = [...patterns, newPattern];\n    onPatternsChange?.(updatedPatterns);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col gap-4 rounded-xl border bg-background/95 p-4 shadow-lg backdrop-blur supports-[backdrop-filter]:bg-background/80\",\n        \"dark:border-white/10 dark:bg-black/90 dark:supports-[backdrop-filter]:bg-black/80\",\n        \"transition-colors duration-200\",\n        className,\n      )}\n      {...props}\n    >\n      {/* Pattern Preview */}\n      {selectedPattern && (\n        <div className=\"flex items-center justify-between border-b pb-4 dark:border-white/10 dark:bg-black\">\n          <div className=\"flex items-center gap-3\">\n            <div\n              className=\"flex h-12 w-12 items-center justify-center rounded-lg border bg-white dark:border-white/10 dark:bg-white/5\"\n              style={{ backgroundColor: selectedPattern.color }}\n            >\n              <Icon\n                type={selectedPattern.type}\n                size={24}\n                className={cn(\n                  \"text-foreground transition-all duration-200 dark:text-white\",\n                  selectedPattern.color && \"fill-current\",\n                )}\n                style={{\n                  color: selectedPattern.color,\n                }}\n              />\n            </div>\n            <div className=\"space-y-1\">\n              <h3 className=\"font-medium text-foreground/90 dark:text-white/90\">\n                {selectedPattern.name}\n              </h3>\n              <p className=\"text-sm text-muted-foreground dark:text-white/50\">\n                {selectedPattern.type.charAt(0).toUpperCase() +\n                  selectedPattern.type.slice(1)}{\" \"}\n                Pattern\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <button\n              onClick={() => handleDuplicatePattern(selectedPattern)}\n              className={cn(\n                \"rounded-md p-2 text-muted-foreground hover:text-foreground dark:text-white/50 dark:hover:text-white\",\n                \"transition-colors\",\n              )}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => handleDeletePattern(selectedPattern.id)}\n              className={cn(\n                \"rounded-md p-2 text-muted-foreground hover:text-foreground dark:text-white/50 dark:hover:text-white\",\n                \"transition-colors\",\n              )}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Pattern Type Selection */}\n      <div className=\"space-y-2\">\n        <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n          Pattern Type\n        </span>\n        <div className=\"grid grid-cols-3 gap-2\">\n          {[\n            \"dots\",\n            \"grid\",\n            \"lines\",\n            \"circles\",\n            \"squares\",\n            \"triangles\",\n            \"diamonds\",\n          ].map((type) => (\n            <button\n              key={type}\n              onClick={() =>\n                handlePatternChange({\n                  ...selectedPattern!,\n                  type: type as Pattern[\"type\"],\n                })\n              }\n              className={cn(\n                \"flex items-center justify-center gap-2 rounded-md p-2\",\n                \"bg-muted hover:bg-muted/80 dark:bg-white/10 dark:hover:bg-white/20\",\n                \"text-sm font-medium text-foreground/90 dark:text-white/90\",\n                \"transition-colors\",\n                selectedPattern?.type === type &&\n                  \"bg-primary/20 dark:bg-white/20\",\n              )}\n            >\n              <Icon type={type as Pattern[\"type\"]} size={16} />\n              {type.charAt(0).toUpperCase() + type.slice(1)}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Pattern Color */}\n      <div className=\"space-y-2\">\n        <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n          Pattern Color\n        </span>\n        <div className=\"grid grid-cols-6 gap-2\">\n          {[\n            \"#6366f1\",\n            \"#f43f5e\",\n            \"#10b981\",\n            \"#f59e0b\",\n            \"#64748b\",\n            \"#000000\",\n          ].map((color) => (\n            <button\n              key={color}\n              onClick={() =>\n                handlePatternChange({\n                  ...selectedPattern!,\n                  color,\n                })\n              }\n              className={cn(\n                \"h-8 w-8 rounded-full border-2\",\n                selectedPattern?.color === color\n                  ? \"border-primary dark:border-white\"\n                  : \"border-transparent\",\n              )}\n              style={{ backgroundColor: color }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Pattern Controls */}\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Size\n            </span>\n            <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n              {selectedPattern?.size}px\n            </span>\n          </div>\n          <input\n            type=\"range\"\n            min={minSize}\n            max={maxSize}\n            value={selectedPattern?.size || minSize}\n            onChange={(e) => handleSizeChange(Number(e.target.value))}\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Spacing\n            </span>\n            <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n              {selectedPattern?.spacing}px\n            </span>\n          </div>\n          <input\n            type=\"range\"\n            min={4}\n            max={48}\n            value={selectedPattern?.spacing || 20}\n            onChange={(e) => handleSpacingChange(Number(e.target.value))}\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Rotation\n            </span>\n            <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n              {selectedPattern?.rotation}°\n            </span>\n          </div>\n          <input\n            type=\"range\"\n            min={0}\n            max={360}\n            value={selectedPattern?.rotation || 0}\n            onChange={(e) => handleRotationChange(Number(e.target.value))}\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n              Opacity\n            </span>\n            <span className=\"text-sm text-muted-foreground dark:text-white/50\">\n              {selectedPattern?.opacity &&\n                Math.round(selectedPattern?.opacity * 100)}\n              %\n            </span>\n          </div>\n          <input\n            type=\"range\"\n            min={0}\n            max={1}\n            step={0.1}\n            value={selectedPattern?.opacity}\n            onChange={(e) =>\n              handlePatternChange({\n                ...selectedPattern!,\n                opacity: parseFloat(e.target.value),\n              })\n            }\n            className={cn(\n              \"h-2 w-full cursor-pointer appearance-none rounded-full bg-muted dark:bg-white/10\",\n              \"range-slider:h-2 range-slider:rounded-full range-slider:bg-primary dark:range-slider:bg-white/90\",\n              \"range-thumb:h-4 range-thumb:w-4 range-thumb:rounded-full range-thumb:border-2 range-thumb:border-primary\",\n              \"range-thumb:bg-background dark:range-thumb:border-white dark:range-thumb:bg-black\",\n              \"transition-colors\",\n            )}\n          />\n        </div>\n\n        {/* Reset Button */}\n        <button\n          onClick={() =>\n            handlePatternChange({\n              ...selectedPattern!,\n              size: 4,\n              spacing: 20,\n              rotation: 0,\n              opacity: 0.5,\n            })\n          }\n          className={cn(\n            \"flex w-full items-center justify-center gap-2 rounded-md p-2\",\n            \"bg-muted hover:bg-muted/80 dark:bg-white/10 dark:hover:bg-white/20\",\n            \"text-sm font-medium text-foreground/90 dark:text-white/90\",\n            \"transition-colors\",\n          )}\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n          Reset Settings\n        </button>\n      </div>\n\n      {/* Pattern Library */}\n      <div className=\"space-y-2 border-t pt-4 dark:border-white/10\">\n        <span className=\"text-sm font-medium text-foreground/90 dark:text-white/90\">\n          Pattern Library\n        </span>\n        <div className=\"grid grid-cols-2 gap-2 sm:grid-cols-3\">\n          {patterns.map((pattern) => (\n            <button\n              key={pattern.id}\n              onClick={() => handlePatternChange(pattern)}\n              className={cn(\n                \"flex flex-col items-center gap-2 rounded-lg border p-3\",\n                \"hover:bg-muted/50 dark:hover:bg-white/5\",\n                \"transition-colors\",\n                selectedPattern?.id === pattern.id &&\n                  \"border-primary bg-primary/10 dark:border-white/20 dark:bg-white/10\",\n              )}\n            >\n              <div\n                className=\"flex h-8 w-8 items-center justify-center rounded-md border bg-white dark:border-white/10 dark:bg-white/5\"\n                style={{ backgroundColor: pattern.color }}\n              >\n                <Icon\n                  type={pattern.type}\n                  size={20}\n                  className={cn(\n                    \"text-foreground transition-all duration-200 dark:text-white\",\n                    pattern.color && \"fill-current\",\n                  )}\n                  style={{\n                    color: pattern.color,\n                  }}\n                />\n              </div>\n              <span className=\"text-xs text-muted-foreground dark:text-white/50\">\n                {pattern.name}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}