{
  "name": "collapsible-card",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/collapsible-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  motion,\n  AnimatePresence,\n  useSpring,\n  useTransform,\n  useMotionValue,\n  useAnimationFrame,\n  HTMLMotionProps,\n} from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { LucideIcon } from \"lucide-react\";\n\ntype MotionDivProps = HTMLMotionProps<\"div\">;\n\nexport interface ArtCanvasCardProps extends MotionDivProps {\n  title: string;\n  icon?: LucideIcon;\n  expanded?: boolean;\n  onToggle?: () => void;\n  preview?: React.ReactNode;\n  variant?: \"canvas\" | \"polaroid\" | \"sketch\" | \"glass\" | \"neon\" | \"kinetic\";\n  interactive?: boolean;\n  glowColor?: string;\n  particleCount?: number;\n}\n\nconst ArtCanvasCard = React.forwardRef<HTMLDivElement, ArtCanvasCardProps>(\n  (\n    {\n      title,\n      icon: Icon,\n      expanded = false,\n      onToggle,\n      preview,\n      variant = \"canvas\",\n      interactive = false,\n      glowColor = \"#10b981\",\n      particleCount = 20,\n      children,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(0);\n    const mouseY = useMotionValue(0);\n    const rotateX = useTransform(mouseY, [-0.5, 0.5], [15, -15]);\n    const rotateY = useTransform(mouseX, [-0.5, 0.5], [-15, 15]);\n\n    // Kinetic animation state\n    const rotation = useMotionValue(0);\n    const scale = useSpring(1, { stiffness: 200, damping: 20 });\n\n    // Smooth spring animations for hover effects\n    const hoverScale = useSpring(1, {\n      stiffness: 300,\n      damping: 25,\n    });\n\n    // Kinetic background animation\n    useAnimationFrame((time) => {\n      if (variant === \"kinetic\") {\n        rotation.set(time / 50);\n        scale.set(1 + Math.sin(time / 1000) * 0.1);\n      }\n    });\n\n    // Mouse tracking for 3D effect\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (!interactive) return;\n      const rect = e.currentTarget.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width - 0.5;\n      const y = (e.clientY - rect.top) / rect.height - 0.5;\n      mouseX.set(x);\n      mouseY.set(y);\n      hoverScale.set(1.02);\n    };\n\n    const handleMouseLeave = () => {\n      if (!interactive) return;\n      mouseX.set(0);\n      mouseY.set(0);\n      hoverScale.set(1);\n    };\n\n    // Generate particles for neon variant\n    const particles = React.useMemo(() => {\n      if (variant !== \"neon\") return [];\n      return Array.from({ length: particleCount }).map((_, i) => ({\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        scale: Math.random() * 0.5 + 0.5,\n        speed: Math.random() * 2 + 1,\n      }));\n    }, [variant, particleCount]);\n\n    const variantStyles = {\n      canvas: \"bg-card dark:bg-card-dark border shadow-lg hover:shadow-xl\",\n      polaroid: \"bg-white dark:bg-gray-900 p-2 rotate-2 shadow-polaroid\",\n      sketch: \"bg-white dark:bg-gray-900 border-2 border-dashed shadow-sketch\",\n      glass:\n        \"bg-white/10 dark:bg-gray-900/10 backdrop-blur-lg border border-white/20 dark:border-gray-800/20\",\n      neon: cn(\n        \"border border-white/10 bg-black/80 dark:border-gray-800/20 dark:bg-black\",\n        \"shadow-[0_0_15px_rgba(0,0,0,0.2)]\",\n        \"dark:shadow-[0_0_15px_rgba(0,0,0,0.4)]\",\n      ),\n      kinetic:\n        \"bg-white/5 dark:bg-gray-900/5 backdrop-blur border border-white/10 dark:border-gray-800/10\",\n    };\n\n    const contentStyles = {\n      canvas: \"bg-background dark:bg-background-dark\",\n      polaroid: \"bg-white dark:bg-gray-900\",\n      sketch: \"bg-white dark:bg-gray-900\",\n      glass: \"bg-white/5 dark:bg-gray-900/5 backdrop-blur\",\n      neon: \"bg-black/50 dark:bg-black/50\",\n      kinetic: \"bg-white/5 dark:bg-gray-900/5 backdrop-blur\",\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"relative overflow-hidden rounded-lg transition-colors duration-300\",\n          variantStyles[variant],\n          interactive && \"cursor-pointer\",\n          className,\n        )}\n        style={{\n          scale: hoverScale,\n          rotateX: interactive ? rotateX : 0,\n          rotateY: interactive ? rotateY : 0,\n          transformPerspective: 1200,\n          transformStyle: \"preserve-3d\",\n        }}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n        onClick={onToggle}\n        whileTap={{ scale: 0.98 }}\n        {...props}\n      >\n        {/* Neon glow effect */}\n        {variant === \"neon\" && (\n          <motion.div\n            className=\"absolute inset-0 opacity-50 blur-xl\"\n            style={{\n              backgroundColor: glowColor,\n              scale: hoverScale,\n            }}\n            animate={{\n              opacity: [0.3, 0.5, 0.3],\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              repeatType: \"reverse\",\n            }}\n          />\n        )}\n\n        {/* Floating particles for neon variant */}\n        {variant === \"neon\" &&\n          particles.map((particle) => (\n            <motion.div\n              key={particle.id}\n              className=\"absolute h-1 w-1 rounded-full bg-white\"\n              animate={{\n                y: [0, -100],\n                x: [0, Math.sin(particle.id) * 50],\n                opacity: [0, 1, 0],\n                scale: [1, particle.scale, 1],\n              }}\n              transition={{\n                duration: particle.speed * 2,\n                repeat: Infinity,\n                repeatType: \"loop\",\n                ease: \"linear\",\n              }}\n              style={{\n                left: `${particle.x}%`,\n                top: `${particle.y + 100}%`,\n              }}\n            />\n          ))}\n\n        {/* Kinetic background */}\n        {variant === \"kinetic\" && (\n          <motion.div\n            className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 via-blue-500/20 to-emerald-500/20\"\n            style={{\n              rotate: rotation,\n              scale,\n            }}\n          />\n        )}\n\n        {/* Preview section */}\n        <motion.div\n          className=\"relative aspect-video overflow-hidden\"\n          style={{\n            transformStyle: \"preserve-3d\",\n            perspective: 1000,\n          }}\n        >\n          {preview}\n        </motion.div>\n\n        {/* Content section */}\n        <motion.div\n          className={cn(\n            \"relative space-y-2 p-4\",\n            contentStyles[variant],\n            expanded && \"pb-6\",\n          )}\n          layout\n        >\n          <div className=\"flex items-center justify-between\">\n            <motion.div\n              className=\"flex items-center space-x-2\"\n              whileHover={{ scale: 1.05 }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n            >\n              {Icon && (\n                <Icon\n                  className={cn(\n                    \"h-5 w-5\",\n                    variant === \"neon\"\n                      ? \"text-white\"\n                      : \"dark:text-foreground-dark text-foreground\",\n                  )}\n                />\n              )}\n              <h3\n                className={cn(\n                  \"font-semibold\",\n                  variant === \"neon\"\n                    ? \"text-white\"\n                    : \"dark:text-foreground-dark text-foreground\",\n                )}\n              >\n                {title}\n              </h3>\n            </motion.div>\n            {onToggle && (\n              <motion.div\n                initial={false}\n                animate={{ rotate: expanded ? 180 : 0 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n                className={cn(\n                  \"h-4 w-4 rounded-full\",\n                  variant === \"neon\"\n                    ? \"text-white\"\n                    : \"dark:text-foreground-dark text-foreground\",\n                )}\n              >\n                â†“\n              </motion.div>\n            )}\n          </div>\n          <AnimatePresence mode=\"wait\">\n            {expanded && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{\n                  type: \"spring\",\n                  stiffness: 300,\n                  damping: 25,\n                  opacity: { duration: 0.2 },\n                }}\n                className={cn(\n                  variant === \"neon\"\n                    ? \"text-white/90\"\n                    : \"dark:text-muted-foreground-dark text-muted-foreground\",\n                )}\n              >\n                {children}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </motion.div>\n    );\n  },\n);\n\nArtCanvasCard.displayName = \"ArtCanvasCard\";\n\nexport default ArtCanvasCard;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}