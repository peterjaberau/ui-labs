{
  "name": "billing-history-timeline",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/billing-history-timeline.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface BillingEvent {\n  date: string;\n  type: \"payment\" | \"invoice\" | \"usage\" | \"subscription\";\n  status?: \"pending\" | \"completed\" | \"failed\";\n  amount?: number;\n  description: string;\n  details?: string;\n}\n\ninterface BillingHistoryTimelineProps {\n  events: BillingEvent[];\n  className?: string;\n  variant?:\n  | \"default\"\n  | \"minimal\"\n  | \"gradient\"\n  | \"neon\"\n  | \"watercolor\"\n  | \"sketch\";\n}\n\nexport default function BillingHistoryTimeline({\n  events,\n  className,\n  variant = \"default\",\n}: BillingHistoryTimelineProps) {\n  const [hoveredEvent, setHoveredEvent] = React.useState<number | null>(null);\n\n  const getVariantStyles = () => {\n    const baseStyles = {\n      background: \"bg-white dark:bg-gray-900\",\n      text: \"text-gray-900 dark:text-gray-100\",\n      line: \"bg-gray-200 dark:bg-gray-700\",\n      card: \"bg-white dark:bg-gray-800\",\n      cardHover: \"hover:shadow-lg dark:hover:shadow-gray-700/30\",\n      status: {\n        completed: \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-100\",\n        pending: \"bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-100\",\n        failed: \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-100\"\n      }\n    };\n\n    switch (variant) {\n      case \"minimal\":\n        return {\n          ...baseStyles,\n          background: \"bg-gray-50 dark:bg-gray-900\",\n          card: \"bg-transparent dark:bg-transparent border border-gray-200 dark:border-gray-700\",\n          line: \"bg-gray-300 dark:bg-gray-600\"\n        };\n      case \"gradient\":\n        return {\n          ...baseStyles,\n          background: \"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20\",\n          card: \"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\",\n          line: \"bg-gradient-to-b from-purple-200 via-pink-300 to-purple-200 dark:from-purple-700 dark:via-pink-600 dark:to-purple-700\"\n        };\n      case \"neon\":\n        return {\n          ...baseStyles,\n          background: \"bg-gray-900 dark:bg-black\",\n          text: \"text-gray-100\",\n          card: \"bg-gray-800/50 dark:bg-black/50 border border-purple-500/20 dark:border-purple-400/20\",\n          line: \"bg-gradient-to-b from-purple-500 via-pink-500 to-purple-500\",\n          cardHover: \"hover:border-purple-500/50 dark:hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.3)] dark:hover:shadow-[0_0_15px_rgba(168,85,247,0.2)]\"\n        };\n      case \"watercolor\":\n        return {\n          ...baseStyles,\n          background: \"bg-gradient-to-br from-blue-50/80 via-purple-50/80 to-pink-50/80 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20\",\n          card: \"bg-white/60 dark:bg-gray-800/60 backdrop-blur-md\",\n          line: \"bg-gradient-to-b from-blue-200/80 via-purple-200/80 to-pink-200/80 dark:from-blue-700/80 dark:via-purple-700/80 dark:to-pink-700/80\"\n        };\n      case \"sketch\":\n        return {\n          ...baseStyles,\n          background: \"bg-gray-50 dark:bg-gray-900\",\n          card: \"bg-white dark:bg-gray-800 border-2 border-gray-900/10 dark:border-white/10\",\n          line: \"bg-gray-900/80 dark:bg-white/80\",\n          cardHover: \"hover:border-gray-900/30 dark:hover:border-white/30\"\n        };\n      default:\n        return baseStyles;\n    }\n  };\n\n  const getEventColor = (\n    type: BillingEvent[\"type\"],\n    status?: BillingEvent[\"status\"],\n  ) => {\n    if (status === \"failed\")\n      return \"from-red-500 to-red-600 dark:from-red-600 dark:to-red-700\";\n    if (status === \"pending\")\n      return \"from-yellow-500 to-yellow-600 dark:from-yellow-600 dark:to-yellow-700\";\n\n    switch (type) {\n      case \"payment\":\n        return \"from-green-500 to-green-600 dark:from-green-600 dark:to-green-700\";\n      case \"invoice\":\n        return \"from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700\";\n      case \"usage\":\n        return \"from-purple-500 to-purple-600 dark:from-purple-600 dark:to-purple-700\";\n      case \"subscription\":\n        return \"from-indigo-500 to-indigo-600 dark:from-indigo-600 dark:to-indigo-700\";\n      default:\n        return \"from-gray-500 to-gray-600 dark:from-gray-600 dark:to-gray-700\";\n    }\n  };\n\n  const getNodeStyles = (type: BillingEvent[\"type\"], status?: BillingEvent[\"status\"]) => {\n    const baseStyles = \"flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-br shadow-lg\";\n\n    if (variant === \"neon\") {\n      return cn(\n        baseStyles,\n        \"shadow-[0_0_10px_rgba(168,85,247,0.3)] dark:shadow-[0_0_10px_rgba(168,85,247,0.2)]\",\n        getEventColor(type, status)\n      );\n    }\n\n    if (variant === \"sketch\") {\n      return cn(\n        baseStyles,\n        \"border-2 border-gray-900/20 dark:border-white/20\",\n        getEventColor(type, status)\n      );\n    }\n\n    return cn(baseStyles, getEventColor(type, status));\n  };\n\n  const getEventIcon = (type: BillingEvent[\"type\"]) => {\n    switch (type) {\n      case \"payment\":\n        return \"ðŸ’¸\";\n      case \"invoice\":\n        return \"ðŸ“œ\";\n      case \"usage\":\n        return \"ðŸ“Š\";\n      case \"subscription\":\n        return \"âœ¨\";\n      default:\n        return \"â€¢\";\n    }\n  };\n\n  const styles = getVariantStyles();\n\n  return (\n    <div\n      className={cn(\n        \"relative overflow-hidden rounded-xl p-8\",\n        styles.background,\n        styles.text,\n        variant === \"neon\" && \"shadow-inner\",\n        className\n      )}\n    >\n      {variant === \"gradient\" && (\n        <div className=\"absolute inset-0 overflow-hidden rounded-xl\">\n          <div className=\"absolute -left-4 -top-4 h-24 w-24 rounded-full bg-purple-200/30 blur-xl dark:bg-purple-700/20\" />\n          <div className=\"absolute -bottom-4 -right-4 h-24 w-24 rounded-full bg-pink-200/30 blur-xl dark:bg-pink-700/20\" />\n        </div>\n      )}\n\n      <div className=\"absolute left-1/2 h-[calc(100%-4rem)] w-1 -translate-x-1/2 rounded-full\">\n        <div className={cn(\"h-full w-full rounded-full\", styles.line)} />\n      </div>\n\n      <div className=\"relative\">\n        <AnimatePresence>\n          {events.map((event, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{\n                delay: index * 0.1,\n                type: \"spring\",\n                stiffness: 100,\n                damping: 15\n              }}\n              onHoverStart={() => setHoveredEvent(index)}\n              onHoverEnd={() => setHoveredEvent(null)}\n              className={cn(\n                \"relative mb-12 flex items-center last:mb-0\",\n                index % 2 === 0 ? \"flex-row\" : \"flex-row-reverse\"\n              )}\n            >\n              <motion.div\n                className={cn(\n                  \"w-[45%] rounded-xl px-6 py-4 shadow-md transition-all\",\n                  styles.card,\n                  styles.cardHover,\n                  hoveredEvent === index && \"scale-105\"\n                )}\n                animate={{\n                  boxShadow: hoveredEvent === index\n                    ? \"0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)\"\n                    : \"0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)\"\n                }}\n              >\n                <div className=\"mb-1 text-sm text-gray-500 dark:text-gray-400\">{event.date}</div>\n                <div className=\"font-medium\">{event.description}</div>\n                {event.details && (\n                  <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-300\">{event.details}</div>\n                )}\n                {event.amount && (\n                  <div className=\"mt-2 text-lg font-semibold\">\n                    ${event.amount.toFixed(2)}\n                  </div>\n                )}\n                {event.status && (\n                  <div className={cn(\n                    \"mt-2 inline-block rounded-full px-2 py-1 text-xs font-medium\",\n                    styles.status[event.status]\n                  )}>\n                    {event.status.charAt(0).toUpperCase() + event.status.slice(1)}\n                  </div>\n                )}\n              </motion.div>\n\n              <motion.div\n                className=\"absolute left-1/2 -translate-x-1/2\"\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <motion.div\n                  className={getNodeStyles(event.type, event.status)}\n                  initial={false}\n                  animate={{\n                    scale: hoveredEvent === index ? 1.1 : 1,\n                    rotate: hoveredEvent === index ? 360 : 0,\n                  }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <span className=\"text-xl\">{getEventIcon(event.type)}</span>\n                </motion.div>\n\n                <motion.div\n                  className={cn(\n                    \"absolute top-1/2 h-[2px] w-8\",\n                    index % 2 === 0 ? \"-left-8\" : \"-right-8\",\n                    \"bg-gradient-to-r\",\n                    getEventColor(event.type, event.status)\n                  )}\n                  initial={{ scaleX: 0 }}\n                  animate={{ scaleX: 1 }}\n                  transition={{ delay: index * 0.1 + 0.2 }}\n                />\n              </motion.div>\n\n              <div className=\"w-[45%]\" />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}