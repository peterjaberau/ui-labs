{
  "name": "canvas-timeline",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/canvas-timeline.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\nimport { CanvasSlider } from \"@/components/ui-canvas/canvas-slider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Play,\n  Pause,\n  RotateCcw,\n  Camera,\n  Eye,\n  EyeOff,\n  ZoomIn,\n  ZoomOut,\n  Flag,\n  Clock,\n  Save,\n  Undo,\n  Redo,\n  MoreVertical,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\nimport { format } from \"date-fns\";\n\nexport interface TimelineStep {\n  id: string;\n  thumbnail: string;\n  timestamp: Date;\n  label: string;\n  type: \"brush\" | \"eraser\" | \"shape\" | \"text\" | \"layer\" | \"filter\" | \"snapshot\";\n  description?: string;\n  duration?: number; // in seconds\n  markers?: Array<{\n    time: number; // position in seconds\n    label: string;\n    color?: string;\n  }>;\n}\n\ninterface CanvasTimelineProps {\n  steps: TimelineStep[];\n  currentStepIndex: number;\n  onStepChange?: (index: number) => void;\n  onSnapshot?: () => void;\n  onUndo?: () => void;\n  onRedo?: () => void;\n  onSave?: () => void;\n  className?: string;\n  canUndo?: boolean;\n  canRedo?: boolean;\n}\n\nexport default function CanvasTimeline({\n  steps,\n  currentStepIndex,\n  onStepChange,\n  onSnapshot,\n  onUndo,\n  onRedo,\n  onSave,\n  className,\n  canUndo = false,\n  canRedo = false,\n}: CanvasTimelineProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1);\n  const [hiddenStepTypes, setHiddenStepTypes] = useState<\n    Set<TimelineStep[\"type\"]>\n  >(new Set());\n  const [zoom, setZoom] = useState(1);\n  const [showTimestamps, setShowTimestamps] = useState(false);\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const visibleSteps = steps.filter((step) => !hiddenStepTypes.has(step.type));\n  const totalDuration = visibleSteps.reduce(\n    (acc, step) => acc + (step.duration || 0),\n    0,\n  );\n\n  const handleKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === \" \") {\n        e.preventDefault();\n        setIsPlaying((prev) => !prev);\n      } else if (e.key === \"ArrowLeft\") {\n        e.preventDefault();\n        if (currentStepIndex > 0) {\n          onStepChange?.(currentStepIndex - 1);\n        }\n      } else if (e.key === \"ArrowRight\") {\n        e.preventDefault();\n        if (currentStepIndex < visibleSteps.length - 1) {\n          onStepChange?.(currentStepIndex + 1);\n        }\n      } else if (e.key === \"z\" && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        if (e.shiftKey) {\n          onRedo?.();\n        } else {\n          onUndo?.();\n        }\n      }\n    },\n    [currentStepIndex, visibleSteps.length, onStepChange, onUndo, onRedo],\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\n  }, [handleKeyPress]);\n\n  const toggleStepTypeVisibility = (type: TimelineStep[\"type\"]) => {\n    const newHidden = new Set(hiddenStepTypes);\n    if (newHidden.has(type)) {\n      newHidden.delete(type);\n    } else {\n      newHidden.add(type);\n    }\n    setHiddenStepTypes(newHidden);\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n    if (!isPlaying && currentStepIndex === steps.length - 1) {\n      onStepChange?.(0);\n    }\n  };\n\n  const goToNextStep = () => {\n    if (currentStepIndex < visibleSteps.length - 1) {\n      onStepChange?.(currentStepIndex + 1);\n    } else {\n      setIsPlaying(false);\n    }\n  };\n\n  const goToPreviousStep = () => {\n    if (currentStepIndex > 0) {\n      onStepChange?.(currentStepIndex - 1);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        goToNextStep();\n      }, 1000 / playbackSpeed);\n\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, currentStepIndex, playbackSpeed]);\n\n  const getStepTypeIcon = (type: TimelineStep[\"type\"]) => {\n    switch (type) {\n      case \"brush\":\n        return \"üñåÔ∏è\";\n      case \"eraser\":\n        return \"üßπ\";\n      case \"shape\":\n        return \"‚≠ï\";\n      case \"text\":\n        return \"üìù\";\n      case \"layer\":\n        return \"üìë\";\n      case \"filter\":\n        return \"üé®\";\n      case \"snapshot\":\n        return \"üì∏\";\n      default:\n        return \"‚Ä¢\";\n    }\n  };\n\n  const handleZoom = (direction: \"in\" | \"out\") => {\n    setZoom((prev) => {\n      const newZoom = direction === \"in\" ? prev * 1.2 : prev / 1.2;\n      return Math.min(Math.max(0.5, newZoom), 2);\n    });\n  };\n\n  return (\n    <TooltipProvider>\n      <Card className={cn(\"p-4\", className)}>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"z-20 flex items-center gap-2\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => onStepChange?.(0)}\n                  >\n                    <RotateCcw className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Reset (Home)</TooltipContent>\n              </Tooltip>\n\n              <div className=\"flex items-center rounded-md border\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={goToPreviousStep}\n                      disabled={currentStepIndex === 0}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Previous (‚Üê)</TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={handlePlayPause}\n                    >\n                      {isPlaying ? (\n                        <Pause className=\"h-4 w-4\" />\n                      ) : (\n                        <Play className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Play/Pause (Space)</TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={goToNextStep}\n                      disabled={currentStepIndex === visibleSteps.length - 1}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Next (‚Üí)</TooltipContent>\n                </Tooltip>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={onUndo}\n                      disabled={!canUndo}\n                    >\n                      <Undo className=\"h-4 w-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Undo (Ctrl+Z)</TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={onRedo}\n                      disabled={!canRedo}\n                    >\n                      <Redo className=\"h-4 w-4\" />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>Redo (Ctrl+Shift+Z)</TooltipContent>\n                </Tooltip>\n              </div>\n            </div>\n\n            <div className=\"z-20 flex items-center gap-2\">\n              <div className=\"flex items-center gap-2 rounded-md border p-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => handleZoom(\"out\")}\n                >\n                  <ZoomOut className=\"h-4 w-4\" />\n                </Button>\n                <span className=\"min-w-[3ch] text-center text-sm\">\n                  {Math.round(zoom * 100)}%\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => handleZoom(\"in\")}\n                >\n                  <ZoomIn className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={onSnapshot}>\n                    <Camera className=\"mr-2 h-4 w-4\" />\n                    Take Snapshot\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={onSave}>\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    Save Timeline\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    onClick={() => setShowTimestamps((p) => !p)}\n                  >\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Toggle Timestamps\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <div className=\"flex items-center gap-2\">\n                <CanvasSlider\n                  value={[playbackSpeed]}\n                  min={0.25}\n                  max={4}\n                  step={0.25}\n                  variant=\"default\"\n                  className=\"w-[100px]\"\n                  onValueChange={([value]) => setPlaybackSpeed(value)}\n                />\n                <span className=\"min-w-[3ch] text-sm text-muted-foreground\">\n                  {playbackSpeed}x\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <ScrollArea className=\"h-[40px] whitespace-nowrap\">\n            <div className=\"flex gap-2\">\n              {Array.from(new Set(steps.map((step) => step.type))).map(\n                (type) => (\n                  <Tooltip key={type}>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant={\n                          hiddenStepTypes.has(type) ? \"ghost\" : \"secondary\"\n                        }\n                        size=\"sm\"\n                        onClick={() => toggleStepTypeVisibility(type)}\n                        className=\"gap-2\"\n                      >\n                        {hiddenStepTypes.has(type) ? (\n                          <EyeOff className=\"h-3 w-3\" />\n                        ) : (\n                          <Eye className=\"h-3 w-3\" />\n                        )}\n                        <span>{getStepTypeIcon(type)}</span>\n                        {type.charAt(0).toUpperCase() + type.slice(1)}\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>Toggle {type} visibility</TooltipContent>\n                  </Tooltip>\n                ),\n              )}\n            </div>\n          </ScrollArea>\n\n          <ScrollArea className=\"h-[120px]\" ref={scrollRef}>\n            <div className=\"flex gap-2\" style={{ width: `${100 * zoom}%` }}>\n              {visibleSteps.map((step, index) => (\n                <Tooltip key={step.id}>\n                  <TooltipTrigger asChild>\n                    <button\n                      onClick={() => onStepChange?.(index)}\n                      className={cn(\n                        \"group relative h-[100px] w-[100px] overflow-hidden rounded-md border transition-all hover:border-primary\",\n                        index === currentStepIndex\n                          ? \"ring-2 ring-primary ring-offset-2\"\n                          : \"border-muted\",\n                      )}\n                    >\n                      <Image\n                        src={step.thumbnail}\n                        alt={step.label}\n                        fill\n                        className=\"object-cover transition-transform group-hover:scale-105\"\n                      />\n                      {/* Markers */}\n                      {step.markers?.map((marker, i) => (\n                        <div\n                          key={i}\n                          className=\"absolute left-0 h-full w-1\"\n                          style={{\n                            left: `${(marker.time / (step.duration || 1)) * 100}%`,\n                            backgroundColor: marker.color || \"var(--primary)\",\n                          }}\n                        >\n                          <Flag className=\"h-3 w-3\" />\n                        </div>\n                      ))}\n                      <div className=\"absolute inset-x-0 bottom-0 bg-gradient-to-t from-background/90 to-background/0 p-2\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-1\">\n                            <span>{getStepTypeIcon(step.type)}</span>\n                            <span className=\"text-xs font-medium\">\n                              {step.label}\n                            </span>\n                          </div>\n                          {showTimestamps && (\n                            <div className=\"text-[10px] text-muted-foreground\">\n                              {format(step.timestamp, \"HH:mm:ss\")}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">{step.label}</div>\n                      {step.description && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          {step.description}\n                        </div>\n                      )}\n                      {step.duration && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          Duration: {step.duration}s\n                        </div>\n                      )}\n                    </div>\n                  </TooltipContent>\n                </Tooltip>\n              ))}\n            </div>\n            <ScrollBar orientation=\"horizontal\" />\n          </ScrollArea>\n\n          <div className=\"space-y-1\">\n            <CanvasSlider\n              value={[currentStepIndex]}\n              min={0}\n              max={visibleSteps.length - 1}\n              step={1}\n              variant=\"default\"\n              className=\"mt-2\"\n              onValueChange={([value]) => onStepChange?.(value)}\n            />\n            <div className=\"flex justify-between text-xs text-muted-foreground\">\n              <span>0:00</span>\n              <span>\n                {Math.floor(totalDuration / 60)}:\n                {String(totalDuration % 60).padStart(2, \"0\")}\n              </span>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}