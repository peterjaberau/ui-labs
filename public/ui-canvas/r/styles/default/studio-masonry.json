{
  "name": "studio-masonry",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/studio-masonry.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StudioMasonryProps extends React.HTMLAttributes<HTMLDivElement> {\n  columns?: number;\n  spacing?: number;\n  children: React.ReactNode;\n  hoverEffect?: \"tilt\" | \"scale\" | \"both\" | \"none\";\n}\n\ninterface StudioMasonryItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  aspectRatio?: number;\n  frameStyle?: \"minimal\" | \"floating\" | \"elegant\" | \"shadow\";\n  priority?: boolean;\n  hoverEffect?: \"tilt\" | \"scale\" | \"both\" | \"none\";\n}\n\nconst StudioMasonry = React.forwardRef<HTMLDivElement, StudioMasonryProps>(\n  (\n    {\n      className,\n      columns = 3,\n      spacing = 20,\n      hoverEffect = \"both\",\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const [items, setItems] = React.useState<HTMLElement[]>([]);\n    const containerRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n      if (containerRef.current) {\n        const elements = Array.from(\n          containerRef.current.children,\n        ) as HTMLElement[];\n        setItems(elements);\n      }\n    }, [children]);\n\n    const getColumns = () => {\n      const columnHeights = new Array(columns).fill(0);\n      const itemPositions = new Array(items.length).fill({ top: 0, left: 0 });\n\n      items.forEach((item, index) => {\n        const shortestColumn = columnHeights.indexOf(\n          Math.min(...columnHeights),\n        );\n        const left = (shortestColumn / columns) * 100;\n        const top = columnHeights[shortestColumn];\n\n        itemPositions[index] = { top, left };\n        columnHeights[shortestColumn] += item.offsetHeight + spacing;\n      });\n\n      return itemPositions;\n    };\n\n    const positions = getColumns();\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"relative w-full\", className)}\n        style={{\n          height:\n            Math.max(...items.map((_, i) => positions[i]?.top || 0)) + \"px\",\n        }}\n        {...props}\n      >\n        <div ref={containerRef} className=\"absolute inset-0\">\n          <AnimatePresence>\n            {React.Children.map(children, (child, index) => {\n              if (!React.isValidElement(child)) return null;\n              const position = positions[index];\n              if (!position) return null;\n\n              return (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{\n                    opacity: 1,\n                    scale: 1,\n                    left: `${position.left}%`,\n                    top: position.top,\n                  }}\n                  exit={{ opacity: 0, scale: 0.9 }}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 300,\n                    damping: 30,\n                    delay: index * 0.05,\n                  }}\n                  className=\"absolute w-[calc(100%/var(--columns)-var(--spacing))]\"\n                  style={{\n                    \"--columns\": columns,\n                    \"--spacing\": `${spacing * 2}px`,\n                  } as React.CSSProperties}\n                >\n                  {React.cloneElement(child as React.ReactElement, { hoverEffect })}\n                </motion.div>\n              );\n            })}\n          </AnimatePresence>\n        </div>\n      </div>\n    );\n  },\n);\nStudioMasonry.displayName = \"StudioMasonry\";\n\nconst frameVariants = {\n  minimal: {\n    border: \"border-0\",\n    shadow:\n      \"shadow-none hover:shadow-lg dark:hover:shadow-neutral-900/30 transition-shadow duration-300\",\n    inner: \"bg-transparent p-2\",\n  },\n  floating: {\n    border: \"border-0\",\n    shadow:\n      \"shadow-lg hover:shadow-xl dark:shadow-neutral-900/20 dark:hover:shadow-neutral-900/40\",\n    inner:\n      \"bg-white dark:bg-neutral-900 rounded-xl p-3 backdrop-blur-sm bg-opacity-50 dark:bg-opacity-50\",\n  },\n  elegant: {\n    border: \"border border-neutral-200/50 dark:border-neutral-800/50\",\n    shadow:\n      \"shadow-md hover:shadow-xl dark:shadow-neutral-900/10 dark:hover:shadow-neutral-900/30\",\n    inner: \"bg-white dark:bg-neutral-900 p-3 rounded-lg\",\n  },\n  shadow: {\n    border: \"border-0\",\n    shadow:\n      \"shadow-[0_8px_30px_rgb(0,0,0,0.12)] dark:shadow-[0_8px_30px_rgba(0,0,0,0.3)] hover:shadow-[0_8px_40px_rgb(0,0,0,0.16)] dark:hover:shadow-[0_8px_40px_rgba(0,0,0,0.4)]\",\n    inner: \"bg-white dark:bg-neutral-900 rounded-xl p-4\",\n  },\n};\n\nconst getHoverAnimation = (effect: \"tilt\" | \"scale\" | \"both\" | \"none\") => {\n  switch (effect) {\n    case \"tilt\":\n      return { rotate: [-1, 1] };\n    case \"scale\":\n      return { scale: 1.02 };\n    case \"both\":\n      return { rotate: [-1, 1], scale: 1.02 };\n    default:\n      return {};\n  }\n};\n\nconst StudioMasonryItem = React.forwardRef<\n  HTMLDivElement,\n  StudioMasonryItemProps\n>(\n  (\n    {\n      className,\n      children,\n      aspectRatio = 1,\n      frameStyle = \"elegant\",\n      hoverEffect = \"both\",\n      priority,\n      ...props\n    },\n    ref,\n  ) => {\n    const frame = frameVariants[frameStyle];\n    const hoverAnimation = getHoverAnimation(hoverEffect);\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"group relative overflow-hidden transition-all duration-300 ease-out\",\n          frame.border,\n          frame.shadow,\n          className,\n        )}\n        whileHover={hoverAnimation}\n        transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n        onAnimationStart={(definition) => {\n          // If you need to do something when animation starts, handle AnimationDefinition here\n          // This replaces the previous event handler that was likely using React's AnimationEvent\n        }}\n        {...props}\n      >\n        <div\n          className={cn(\"relative overflow-hidden\", frame.inner)}\n          style={{ paddingBottom: `${aspectRatio * 100}%` }}\n        >\n          <div className=\"absolute inset-0\">{children}</div>\n        </div>\n        <div className=\"pointer-events-none absolute inset-0 bg-gradient-to-br from-white/10 via-transparent to-black/5 opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-white/5 dark:to-black/10\" />\n        <div className=\"pointer-events-none absolute inset-0 bg-[radial-gradient(ellipse_at_center,_rgba(255,255,255,0.15)_0%,_transparent_70%)] opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:bg-[radial-gradient(ellipse_at_center,_rgba(255,255,255,0.1)_0%,_transparent_70%)]\" />\n      </motion.div>\n    );\n  },\n);\nStudioMasonryItem.displayName = \"StudioMasonryItem\";\n\nexport {\n  StudioMasonry,\n  StudioMasonryItem,\n  type StudioMasonryProps,\n  type StudioMasonryItemProps,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}