{
  "name": "gallery-grid",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/gallery-grid.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, AnimatePresence, HTMLMotionProps } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ntype MotionDivProps = HTMLMotionProps<\"div\">;\n\nexport interface GalleryGridProps extends MotionDivProps {\n  columns?: number;\n  gap?: number;\n  children: React.ReactNode;\n  hover?: \"zoom\" | \"lift\" | \"tilt\" | \"none\";\n}\n\nexport interface GalleryItemProps extends MotionDivProps {\n  aspectRatio?: \"square\" | \"video\" | \"portrait\" | \"landscape\";\n  children: React.ReactNode;\n  hover?: \"zoom\" | \"lift\" | \"tilt\" | \"none\";\n  priority?: boolean;\n}\n\nconst hoverEffects = {\n  zoom: {\n    scale: 1.03,\n    transition: { duration: 0.3 },\n  },\n  lift: {\n    y: -10,\n    transition: { duration: 0.3 },\n  },\n  tilt: {\n    rotateX: 10,\n    rotateY: 10,\n    transition: { duration: 0.3 },\n  },\n  none: {},\n};\n\nconst GalleryItem = React.forwardRef<HTMLDivElement, GalleryItemProps>(\n  (\n    {\n      className,\n      aspectRatio = \"square\",\n      children,\n      hover = \"zoom\",\n      priority,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isHovered, setIsHovered] = React.useState(false);\n\n    const aspectRatioMap = {\n      square: \"aspect-square\",\n      video: \"aspect-video\",\n      portrait: \"aspect-[3/4]\",\n      landscape: \"aspect-[4/3]\",\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"group relative overflow-hidden rounded-xl border border-input/10 bg-gradient-to-br from-background/40 via-background/20 to-background/40 backdrop-blur-sm transition-all duration-300\",\n          \"hover:border-input/30 hover:shadow-[0_0_1rem_-0.25rem] hover:shadow-primary/20\",\n          aspectRatioMap[aspectRatio],\n          className,\n        )}\n        initial={false}\n        whileHover={hoverEffects[hover]}\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        {...props}\n      >\n        <motion.div\n          className=\"absolute inset-0 bg-gradient-to-t from-background/90 via-background/20 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n          initial={false}\n        />\n        {children}\n        <AnimatePresence>\n          {isHovered && (\n            <motion.div\n              className=\"absolute inset-0 flex items-end p-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <div className=\"w-full space-y-2\">\n                {React.Children.map(\n                  React.Children.toArray(children).filter(\n                    (child) =>\n                      React.isValidElement(child) && child.type === \"div\",\n                  ),\n                  (child) => child,\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    );\n  },\n);\nGalleryItem.displayName = \"GalleryItem\";\n\nconst GalleryGrid = React.forwardRef<HTMLDivElement, GalleryGridProps>(\n  (\n    { className, columns = 3, gap = 4, children, hover = \"zoom\", ...props },\n    ref,\n  ) => {\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"masonry-grid\",\n          `gap- columns-1${gap} lg:columns- sm:columns-2${columns}`,\n          className,\n        )}\n        style={{\n          columnGap: `${gap * 0.25}rem`,\n        }}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4, staggerChildren: 0.1 }}\n        {...props}\n      >\n        {React.Children.map(children, (child, index) => {\n          if (React.isValidElement(child)) {\n            return (\n              <motion.div\n                key={index}\n                className=\"masonry-item mb-4 break-inside-avoid\"\n                style={{\n                  marginBottom: `${gap * 0.25}rem`,\n                }}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                {React.cloneElement(child as React.ReactElement, {\n                  hover,\n                  priority: index < 4,\n                })}\n              </motion.div>\n            );\n          }\n          return child;\n        })}\n      </motion.div>\n    );\n  },\n);\nGalleryGrid.displayName = \"GalleryGrid\";\n\nexport { GalleryGrid, GalleryItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}