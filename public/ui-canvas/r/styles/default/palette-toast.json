{
  "name": "palette-toast",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui-canvas/palette-toast.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { X } from \"lucide-react\";\n\nexport interface PaletteToastProps {\n  message: string;\n  type?: \"info\" | \"success\" | \"warning\" | \"error\";\n  duration?: number;\n  onClose?: () => void;\n  className?: string;\n}\n\ninterface ToastColors {\n  background: string;\n  text: string;\n  accent: string;\n}\n\nconst toastColors: Record<string, ToastColors> = {\n  info: {\n    background:\n      \"from-blue-100 to-blue-50 dark:from-blue-700/40 dark:to-blue-700/20\",\n    text: \"text-blue-800 dark:text-blue-200\",\n    accent: \"bg-blue-200 dark:bg-blue-700\",\n  },\n  success: {\n    background:\n      \"from-emerald-100 to-emerald-50 dark:from-emerald-700/40 dark:to-emerald-700/20\",\n    text: \"text-emerald-800 dark:text-emerald-200\",\n    accent: \"bg-emerald-200 dark:bg-emerald-700\",\n  },\n  warning: {\n    background:\n      \"from-amber-100 to-amber-50 dark:from-amber-700/40 dark:to-amber-700/20\",\n    text: \"text-amber-800 dark:text-amber-200\",\n    accent: \"bg-amber-200 dark:bg-amber-700\",\n  },\n  error: {\n    background:\n      \"from-rose-100 to-rose-50 dark:from-rose-700/40 dark:to-rose-700/20\",\n    text: \"text-rose-800 dark:text-rose-200\",\n    accent: \"bg-rose-200 dark:bg-rose-700\",\n  },\n};\n\nexport function PaletteToast({\n  message,\n  type = \"info\",\n  duration = 5000,\n  onClose,\n  className,\n}: PaletteToastProps) {\n  const [isVisible, setIsVisible] = React.useState(true);\n  const colors = toastColors[type];\n\n  React.useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        onClose?.();\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration, onClose]);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: 50, scale: 0.9 }}\n          animate={{ opacity: 1, y: 0, scale: 1 }}\n          exit={{\n            opacity: 0,\n            scale: 0.9,\n            y: 20,\n            transition: { duration: 0.2 },\n          }}\n          className={cn(\n            \"relative overflow-hidden rounded-lg p-4 shadow-lg\",\n            \"bg-gradient-to-br backdrop-blur-[2px]\",\n            \"dark:shadow-2xl dark:shadow-black/10\",\n            \"border border-white/20 dark:border-white/10\",\n            colors.background,\n            className,\n          )}\n        >\n          {/* Paint drip effect */}\n          <div\n            className={cn(\n              \"absolute -left-4 -top-4 h-12 w-12 rounded-full opacity-20 dark:opacity-30\",\n              colors.accent,\n            )}\n          />\n          <div\n            className={cn(\n              \"absolute -bottom-4 -right-4 h-10 w-10 rounded-full opacity-20 dark:opacity-30\",\n              colors.accent,\n            )}\n          />\n\n          {/* Message content */}\n          <div className=\"relative flex items-center justify-between gap-2\">\n            <p className={cn(\"font-medium\", colors.text)}>{message}</p>\n            <button\n              onClick={() => {\n                setIsVisible(false);\n                onClose?.();\n              }}\n              className={cn(\n                \"rounded-full p-1\",\n                colors.text,\n                \"hover:bg-black/5 dark:hover:bg-white/5\",\n              )}\n            >\n              <X size={14} />\n            </button>\n          </div>\n\n          {/* Watercolor spread animation */}\n          <motion.div\n            initial={{ scale: 0.8, opacity: 0 }}\n            animate={{\n              scale: [1, 1.2, 1.4],\n              opacity: [0.3, 0.2, 0],\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              repeatType: \"loop\",\n            }}\n            className={cn(\n              \"absolute left-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 rounded-full\",\n              colors.accent,\n              \"pointer-events-none opacity-10 dark:opacity-20\",\n            )}\n          />\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}