{
  "name": "studio-gallery-view",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/studio-gallery-view.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\nimport {\n  motion,\n  AnimatePresence,\n  useScroll,\n  useTransform,\n} from \"framer-motion\";\n\ninterface StudioGalleryViewProps extends React.HTMLAttributes<HTMLDivElement> {\n  images?: {\n    src: string;\n    alt: string;\n    category?: string;\n    aspectRatio?: \"square\" | \"portrait\" | \"landscape\";\n  }[];\n  columns?: number;\n  gap?: number;\n  masonry?: boolean;\n  filterCategories?: boolean;\n}\n\nexport default function StudioGalleryView({\n  images = [],\n  columns = 3,\n  gap = 4,\n  masonry = true,\n  filterCategories = true,\n  className,\n  ...props\n}: StudioGalleryViewProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { scrollY } = useScroll();\n\n  const categories = filterCategories\n    ? Array.from(\n        new Set(\n          images.filter((img) => img.category).map((img) => img.category),\n        ),\n      )\n    : [];\n\n  const filteredImages = selectedCategory\n    ? images.filter((img) => img.category === selectedCategory)\n    : images;\n\n  const getAspectRatio = (type?: string) => {\n    switch (type) {\n      case \"portrait\":\n        return \"aspect-[3/4]\";\n      case \"landscape\":\n        return \"aspect-[4/3]\";\n      default:\n        return \"aspect-square\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\" {...props}>\n      {filterCategories && categories.length > 0 && (\n        <motion.div\n          className=\"sticky top-0 z-10 mb-4 flex flex-wrap gap-2 bg-background/80 p-4 backdrop-blur\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          <motion.button\n            onClick={() => setSelectedCategory(null)}\n            className={cn(\n              \"rounded-full px-4 py-2 text-sm font-medium transition-colors\",\n              !selectedCategory\n                ? \"bg-primary text-primary-foreground\"\n                : \"bg-muted hover:bg-muted/80\",\n            )}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            All\n          </motion.button>\n          {categories &&\n            categories?.map((category) => (\n              <motion.button\n                key={category}\n                onClick={() => setSelectedCategory(category)}\n                className={cn(\n                  \"rounded-full px-4 py-2 text-sm font-medium transition-colors\",\n                  selectedCategory === category\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted hover:bg-muted/80\",\n                )}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                {category}\n              </motion.button>\n            ))}\n        </motion.div>\n      )}\n\n      <motion.div\n        ref={containerRef}\n        className={cn(\n          \"grid w-full\",\n          masonry\n            ? \"grid-cols-1 gap-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\"\n            : `grid-cols-1 md:grid-cols-${columns}`,\n          className,\n        )}\n        layout=\"position\"\n      >\n        <AnimatePresence mode=\"popLayout\">\n          {filteredImages.map((image, index) => {\n            const y = useTransform(\n              scrollY,\n              [0, 1000],\n              [0, index % 2 === 0 ? 50 : -50],\n            );\n\n            return (\n              <motion.div\n                key={image.src}\n                style={{ y }}\n                layout=\"position\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                transition={{ \n                  duration: 0.3,\n                  layout: {\n                    type: \"spring\",\n                    stiffness: 400,\n                    damping: 25\n                  }\n                }}\n                className={cn(\n                  \"group relative overflow-hidden rounded-lg\",\n                  getAspectRatio(image.aspectRatio),\n                  \"h-full w-full\",\n                )}\n                onHoverStart={() => setHoveredIndex(index)}\n                onHoverEnd={() => setHoveredIndex(null)}\n              >\n                <Image\n                  src={image.src}\n                  alt={image.alt}\n                  fill\n                  className=\"object-cover transition-transform duration-500 will-change-transform group-hover:scale-110\"\n                  sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                  priority={index < 4}\n                />\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: hoveredIndex === index ? 1 : 0 }}\n                  transition={{ duration: 0.3 }}\n                />\n                <motion.div\n                  className=\"absolute inset-0 flex items-end p-4\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{\n                    opacity: hoveredIndex === index ? 1 : 0,\n                    y: hoveredIndex === index ? 0 : 20,\n                  }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <div>\n                    <motion.h3\n                      className=\"mb-1 font-medium text-white\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{\n                        opacity: hoveredIndex === index ? 1 : 0,\n                        y: hoveredIndex === index ? 0 : 10,\n                      }}\n                      transition={{ duration: 0.3, delay: 0.1 }}\n                    >\n                      {image.alt}\n                    </motion.h3>\n                    {image.category && (\n                      <motion.span\n                        className=\"text-sm text-white/80\"\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{\n                          opacity: hoveredIndex === index ? 1 : 0,\n                          y: hoveredIndex === index ? 0 : 10,\n                        }}\n                        transition={{ duration: 0.3, delay: 0.2 }}\n                      >\n                        {image.category}\n                      </motion.span>\n                    )}\n                  </div>\n                </motion.div>\n              </motion.div>\n            );\n          })}\n        </AnimatePresence>\n      </motion.div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}