{
  "name": "artistic-tooltip",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "ui-canvas/artistic-tooltip.tsx",
      "content": "\"use client\";\n\nimport React, { useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst tooltipVariants = cva(\n  \"pointer-events-none fixed left-1/2 top-1/2 z-50 select-none px-3 py-1.5 text-sm font-medium\",\n  {\n    variants: {\n      style: {\n        watercolor:\n          \"rounded-lg border border-white/20 bg-gradient-to-br from-[#7FB3D5]/95 to-[#5499C7]/90 text-white shadow-md shadow-[#7FB3D5]/20 backdrop-blur-md [mask-image:paint(watercolor)]\",\n        oil: \"rounded-lg border border-white/10 bg-gradient-to-br from-[#2C3E50]/95 to-[#34495E]/90 text-white shadow-md shadow-[#2C3E50]/30 backdrop-blur-md [mask-image:paint(oil)]\",\n        pencil:\n          \"rounded-lg border border-white/10 bg-gradient-to-br from-zinc-800/95 to-zinc-900/90 text-white/90 shadow-md shadow-zinc-900/30 backdrop-blur-md [mask-image:paint(pencil)]\",\n      },\n    },\n    defaultVariants: {\n      style: \"watercolor\",\n    },\n  },\n);\n\nexport type ArtisticTooltipProps = React.HTMLAttributes<HTMLDivElement> &\n  VariantProps<typeof tooltipVariants> & {\n    content: string;\n    show?: boolean;\n    children: React.ReactNode;\n  };\n\nexport default function ArtisticTooltip({\n  className,\n  style,\n  content,\n  show = false,\n  children,\n  ...props\n}: ArtisticTooltipProps) {\n  const triggerRef = useRef<HTMLDivElement>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const updateTooltipPosition = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!tooltipRef.current || !triggerRef.current) return;\n\n    const trigger = triggerRef.current.getBoundingClientRect();\n    const tooltip = tooltipRef.current;\n    const mouseX = e.clientX - trigger.left;\n    const mouseY = e.clientY - trigger.top;\n\n    // Calculate position relative to mouse but with some offset\n    const offsetX = 15;\n    const offsetY = -30;\n\n    tooltip.style.transform = `translate(${mouseX + offsetX}px, ${mouseY + offsetY}px)`;\n  };\n\n  return (\n    <div\n      ref={triggerRef}\n      className=\"relative inline-flex\"\n      onMouseMove={show ? updateTooltipPosition : undefined}\n    >\n      {children}\n      {show && (\n        <div\n          ref={tooltipRef}\n          className={cn(\n            tooltipVariants({ style }),\n            \"whitespace-pre-wrap break-words transition-opacity duration-150\",\n            show ? \"opacity-100\" : \"opacity-0\",\n            className,\n          )}\n          {...props}\n        >\n          {content}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}