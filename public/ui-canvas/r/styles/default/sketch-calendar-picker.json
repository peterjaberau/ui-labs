{
  "name": "sketch-calendar-picker",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "date-fns",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/sketch-calendar-picker.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport {\n  format,\n  addMonths,\n  subMonths,\n  startOfMonth,\n  endOfMonth,\n  eachDayOfInterval,\n  isSameMonth,\n  isSameDay,\n  isToday,\n} from \"date-fns\";\n\ninterface SketchCalendarPickerProps {\n  value?: Date;\n  onChange?: (date: Date) => void;\n  className?: string;\n  variant?: \"default\" | \"minimal\" | \"artistic\" | \"gradient\" | \"neon\" | \"candy\";\n}\n\nexport default function SketchCalendarPicker({\n  value,\n  onChange,\n  className,\n  variant = \"default\",\n}: SketchCalendarPickerProps) {\n  const [currentMonth, setCurrentMonth] = useState(value || new Date());\n  const [hoveredDate, setHoveredDate] = useState<Date | null>(null);\n\n  const monthStart = startOfMonth(currentMonth);\n  const monthEnd = endOfMonth(currentMonth);\n  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  // Get day names with Sunday as first day\n  const dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  // Calculate padding days for the first week\n  const firstDayOfMonth = monthStart.getDay();\n  const paddingDays = Array.from(\n    { length: firstDayOfMonth },\n    (_, i) =>\n      new Date(\n        monthStart.getFullYear(),\n        monthStart.getMonth(),\n        -firstDayOfMonth + i + 1,\n      ),\n  );\n\n  const handlePrevMonth = () => setCurrentMonth(subMonths(currentMonth, 1));\n  const handleNextMonth = () => setCurrentMonth(addMonths(currentMonth, 1));\n\n  const getVariantStyles = () => {\n    switch (variant) {\n      case \"minimal\":\n        return \"bg-white dark:bg-zinc-950 border border-zinc-200 dark:border-zinc-800\";\n      case \"artistic\":\n        return \"bg-[url('/paper-texture.png')] bg-cover border-2 border-zinc-800 dark:border-zinc-300 [filter:contrast(1.1)] [box-shadow:4px_4px_0_0_rgba(0,0,0,0.2)]\";\n      case \"gradient\":\n        return \"bg-gradient-to-br from-violet-500 via-purple-500 to-indigo-500 border-none text-white [box-shadow:0_8px_32px_rgba(124,58,237,0.2)]\";\n      case \"neon\":\n        return \"bg-zinc-950 border-2 border-emerald-500 text-emerald-500 [text-shadow:0_0_10px_rgba(16,185,129,0.5)] [box-shadow:0_0_20px_rgba(16,185,129,0.3),inset_0_0_20px_rgba(16,185,129,0.2)]\";\n      case \"candy\":\n        return \"bg-gradient-to-br from-pink-300 via-rose-300 to-pink-400 border-white/20 border-2 backdrop-blur-xl text-white [box-shadow:0_8px_32px_rgba(244,114,182,0.2)]\";\n      default:\n        return \"bg-gradient-to-br from-white to-zinc-50 dark:from-zinc-900 dark:to-zinc-950 border border-zinc-200 dark:border-zinc-800\";\n    }\n  };\n\n  const getDayStyles = (\n    isSelected: boolean | undefined,\n    isCurrentDate: boolean,\n    isCurrentMonth: boolean,\n  ) => {\n    const baseStyles =\n      \"relative flex h-8 w-8 items-center justify-center rounded-lg text-sm transition-colors\";\n\n    if (!isCurrentMonth) {\n      return cn(baseStyles, \"text-zinc-300 dark:text-zinc-700\");\n    }\n\n    if (isSelected) {\n      switch (variant) {\n        case \"gradient\":\n          return cn(baseStyles, \"bg-white/20 font-semibold text-white\");\n        case \"neon\":\n          return cn(\n            baseStyles,\n            \"bg-emerald-500/20 font-semibold text-emerald-400 [text-shadow:0_0_10px_rgba(16,185,129,0.8)]\",\n          );\n        case \"candy\":\n          return cn(baseStyles, \"bg-white/30 font-semibold text-white\");\n        default:\n          return cn(\n            baseStyles,\n            \"bg-primary font-semibold text-primary-foreground\",\n          );\n      }\n    }\n\n    if (isCurrentDate) {\n      switch (variant) {\n        case \"gradient\":\n          return cn(baseStyles, \"font-medium text-white\");\n        case \"neon\":\n          return cn(baseStyles, \"font-medium text-emerald-400\");\n        case \"candy\":\n          return cn(baseStyles, \"font-medium text-white\");\n        default:\n          return cn(baseStyles, \"font-medium text-primary\");\n      }\n    }\n\n    switch (variant) {\n      case \"gradient\":\n        return cn(baseStyles, \"text-white/90 hover:bg-white/10\");\n      case \"neon\":\n        return cn(baseStyles, \"text-emerald-500/90 hover:bg-emerald-500/10\");\n      case \"candy\":\n        return cn(baseStyles, \"text-white/90 hover:bg-white/10\");\n      default:\n        return cn(baseStyles, \"hover:bg-zinc-100 dark:hover:bg-zinc-800\");\n    }\n  };\n\n  const getHeaderStyles = () => {\n    switch (variant) {\n      case \"gradient\":\n      case \"candy\":\n        return \"text-white/70\";\n      case \"neon\":\n        return \"text-emerald-500/70\";\n      default:\n        return \"text-zinc-500 dark:text-zinc-400\";\n    }\n  };\n\n  const getButtonStyles = () => {\n    switch (variant) {\n      case \"gradient\":\n      case \"candy\":\n        return \"text-white/90 hover:bg-white/10\";\n      case \"neon\":\n        return \"text-emerald-500 hover:bg-emerald-500/10\";\n      default:\n        return \"hover:bg-zinc-100 dark:hover:bg-zinc-800\";\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className={cn(\n        \"w-[320px] rounded-xl p-4 shadow-lg backdrop-blur-sm\",\n        getVariantStyles(),\n        className,\n      )}\n    >\n      {/* Header */}\n      <div className=\"mb-4 flex items-center justify-between\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={handlePrevMonth}\n          className={cn(\"rounded-lg p-1\", getButtonStyles())}\n        >\n          <ChevronLeft className=\"h-5 w-5\" />\n        </motion.button>\n        <h2\n          className={cn(\n            \"text-lg font-semibold\",\n            variant === \"gradient\" || variant === \"candy\"\n              ? \"text-white\"\n              : variant === \"neon\"\n                ? \"text-emerald-500\"\n                : undefined,\n          )}\n        >\n          {format(currentMonth, \"MMMM yyyy\")}\n        </h2>\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={handleNextMonth}\n          className={cn(\"rounded-lg p-1\", getButtonStyles())}\n        >\n          <ChevronRight className=\"h-5 w-5\" />\n        </motion.button>\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-7 gap-1\">\n        {/* Day Names */}\n        {dayNames.map((day) => (\n          <div\n            key={day}\n            className={cn(\"text-center text-sm font-medium\", getHeaderStyles())}\n          >\n            {day}\n          </div>\n        ))}\n\n        {/* Padding Days */}\n        {paddingDays.map((date, i) => (\n          <div\n            key={`padding-${i}`}\n            className={cn(\n              \"text-center text-sm\",\n              variant === \"gradient\" || variant === \"candy\"\n                ? \"text-white/30\"\n                : variant === \"neon\"\n                  ? \"text-emerald-500/30\"\n                  : \"text-zinc-300 dark:text-zinc-700\",\n            )}\n          >\n            {date.getDate()}\n          </div>\n        ))}\n\n        {/* Actual Days */}\n        {daysInMonth.map((date) => {\n          const isSelected = value && isSameDay(date, value);\n          const isCurrentMonth = isSameMonth(date, currentMonth);\n          const isCurrentDate = isToday(date);\n          const isHovered = hoveredDate && isSameDay(date, hoveredDate);\n\n          return (\n            <motion.button\n              key={date.toISOString()}\n              onClick={() => onChange?.(date)}\n              onHoverStart={() => setHoveredDate(date)}\n              onHoverEnd={() => setHoveredDate(null)}\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              className={getDayStyles(\n                isSelected,\n                isCurrentDate,\n                isCurrentMonth,\n              )}\n            >\n              {isHovered && variant === \"artistic\" && (\n                <motion.div\n                  layoutId=\"hover-effect\"\n                  className=\"absolute inset-0 rounded-lg border-2 border-dashed border-primary\"\n                  transition={{ duration: 0.2 }}\n                />\n              )}\n              <span>{date.getDate()}</span>\n              {isCurrentDate && !isSelected && (\n                <div\n                  className={cn(\n                    \"absolute bottom-1 h-1 w-1 rounded-full\",\n                    variant === \"gradient\" || variant === \"candy\"\n                      ? \"bg-white\"\n                      : variant === \"neon\"\n                        ? \"bg-emerald-500\"\n                        : \"bg-primary\",\n                  )}\n                />\n              )}\n            </motion.button>\n          );\n        })}\n      </div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}