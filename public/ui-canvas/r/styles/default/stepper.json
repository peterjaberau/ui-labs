{
  "name": "stepper",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui-canvas/stepper.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst stepperVariants = cva(\"flex w-full\", {\n  variants: {\n    orientation: {\n      horizontal: \"flex-row justify-between\",\n      vertical: \"flex-col space-y-4\",\n    },\n    size: {\n      default: \"\",\n      sm: \"text-sm\",\n      lg: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    orientation: \"horizontal\",\n    size: \"default\",\n  },\n});\n\nexport interface Step {\n  label: string;\n  description?: string;\n  optional?: boolean;\n  error?: boolean;\n  completed?: boolean;\n  disabled?: boolean;\n  onClick?: () => void;\n  validate?: () => Promise<boolean> | boolean;\n}\n\nexport interface StepperProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof stepperVariants> {\n  currentStep: number;\n  steps: Step[];\n  onStepChange?: (step: number) => void;\n  allowClickNavigation?: boolean;\n  showStepNumbers?: boolean;\n  showConnectors?: boolean;\n}\n\nconst Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\n  (\n    {\n      className,\n      currentStep,\n      steps,\n      orientation = \"horizontal\",\n      size = \"default\",\n      onStepChange,\n      allowClickNavigation = true,\n      showStepNumbers = true,\n      showConnectors = true,\n      ...props\n    },\n    ref,\n  ) => {\n    const [validationErrors, setValidationErrors] = React.useState<boolean[]>(\n      [],\n    );\n\n    const handleStepClick = async (index: number) => {\n      if (!allowClickNavigation || steps[index].disabled) return;\n\n      if (index > currentStep) {\n        const validations = await Promise.all(\n          steps.slice(0, index).map(async (step) => {\n            if (step.validate) {\n              return await step.validate();\n            }\n            return true;\n          }),\n        );\n\n        setValidationErrors(validations.map((valid) => !valid));\n\n        if (validations.some((valid) => !valid)) {\n          return;\n        }\n      }\n\n      onStepChange?.(index);\n      steps[index].onClick?.();\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(stepperVariants({ orientation, size }), className)}\n        role=\"navigation\"\n        aria-label=\"Progress\"\n        {...props}\n      >\n        {steps.map((step, index) => {\n          const isCompleted = index < currentStep || step.completed;\n          const isCurrent = index === currentStep;\n          const hasError = step.error || validationErrors[index];\n\n          return (\n            <div\n              key={index}\n              className={cn(\n                \"relative flex flex-1 flex-col items-center\",\n                orientation === \"vertical\" && \"flex-row space-x-4\",\n              )}\n            >\n              <div className=\"flex items-center justify-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => handleStepClick(index)}\n                  disabled={step.disabled}\n                  className={cn(\n                    \"relative z-50 flex h-12 w-12 items-center justify-center rounded-full border-2 text-lg font-medium transition-all duration-200\",\n                    {\n                      \"border-2 border-primary bg-primary text-primary-foreground dark:border-primary dark:bg-primary dark:text-primary-foreground\":\n                        isCompleted,\n                      \"border-2 bg-background text-primary dark:border-primary dark:bg-background dark:text-primary dark:ring-primary dark:ring-offset-background\":\n                        isCurrent,\n                      \"border-destructive bg-destructive/10 text-destructive dark:border-destructive dark:bg-destructive/20 dark:text-destructive\":\n                        hasError,\n                      \"border-muted-foreground/25 bg-background text-muted-foreground hover:border-muted-foreground/50 dark:border-muted-foreground/20 dark:bg-background dark:text-muted-foreground dark:hover:border-muted-foreground/40\":\n                        !isCompleted && !isCurrent && !hasError,\n                      \"cursor-not-allowed opacity-50\": step.disabled,\n                      \"cursor-pointer hover:bg-muted dark:hover:bg-muted\":\n                        allowClickNavigation &&\n                        !step.disabled &&\n                        !isCompleted &&\n                        !isCurrent &&\n                        !hasError,\n                    },\n                  )}\n                  aria-current={isCurrent ? \"step\" : undefined}\n                >\n                  {isCompleted && !hasError ? (\n                    <svg\n                      className=\"h-6 w-6\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M5 13l4 4L19 7\"\n                      />\n                    </svg>\n                  ) : showStepNumbers ? (\n                    <span>{index + 1}</span>\n                  ) : null}\n                </button>\n\n                {showConnectors && index < steps.length - 1 && (\n                  <div\n                    className={cn(\n                      \"absolute\",\n                      orientation === \"vertical\"\n                        ? \"left-6 top-12 h-full w-0.5\"\n                        : \"left-[calc(50%-1px)] top-6 h-0.5 w-full\",\n                      index < currentStep\n                        ? \"bg-primary dark:bg-primary\"\n                        : hasError\n                          ? \"bg-destructive/30 dark:bg-destructive/40\"\n                          : \"bg-muted-foreground/25 dark:bg-muted-foreground/20\",\n                      \"transition-colors duration-200\",\n                    )}\n                    aria-hidden=\"true\"\n                  />\n                )}\n              </div>\n\n              <div\n                className={cn(\"mt-4 flex flex-col items-center text-center\", {\n                  \"items-start text-left\": orientation === \"vertical\",\n                })}\n              >\n                <span\n                  className={cn(\"text-base font-semibold\", {\n                    \"text-primary dark:text-primary\": isCurrent,\n                    \"text-destructive dark:text-destructive\": hasError,\n                    \"text-foreground dark:text-foreground\":\n                      isCompleted && !hasError,\n                    \"text-muted-foreground dark:text-muted-foreground\":\n                      !isCurrent && !hasError && !isCompleted,\n                  })}\n                >\n                  {step.label}\n                  {step.optional && (\n                    <span className=\"ml-1 text-sm font-normal text-muted-foreground dark:text-muted-foreground\">\n                      (Optional)\n                    </span>\n                  )}\n                </span>\n                {step.description && (\n                  <span\n                    className={cn(\"text-sm\", {\n                      \"text-destructive dark:text-destructive\": hasError,\n                      \"text-muted-foreground dark:text-muted-foreground\":\n                        !hasError,\n                    })}\n                  >\n                    {step.description}\n                  </span>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\n\nStepper.displayName = \"Stepper\";\n\nexport { Stepper, stepperVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}