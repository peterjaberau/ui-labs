{
  "name": "art-board-layout",
  "type": "registry:ui",
  "dependencies": [
    "@dnd-kit/core"
  ],
  "files": [
    {
      "path": "ui-canvas/art-board-layout.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ArtBoardLayoutProps {\n  gridSize?: number;\n  borderWidth?: \"thin\" | \"medium\" | \"thick\";\n  borderStyle?: \"modern\" | \"classic\" | \"rustic\";\n  backgroundColor?: string;\n  gridColor?: string;\n  snapToGrid?: boolean;\n  minHeight?: string;\n  showGridLines?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface DraggableProps {\n  children: React.ReactNode;\n  onPositionChange?: (position: Position) => void;\n  initialPosition?: Position;\n  gridSize?: number;\n  snapToGrid?: boolean;\n}\n\nconst Draggable = ({\n  children,\n  onPositionChange,\n  initialPosition = { x: 0, y: 0 },\n  gridSize = 20,\n  snapToGrid = true,\n}: DraggableProps) => {\n  const elementRef = useRef<HTMLDivElement>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState<Position>(initialPosition);\n  const dragStart = useRef<Position>({ x: 0, y: 0 });\n  const elementStart = useRef<Position>({ x: 0, y: 0 });\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (e.button !== 0) return; // Only left click\n      setIsDragging(true);\n      dragStart.current = { x: e.clientX, y: e.clientY };\n      elementStart.current = position;\n      e.stopPropagation();\n    },\n    [position],\n  );\n\n  const handleMouseMove = useCallback(\n    (e: MouseEvent) => {\n      if (!isDragging) return;\n\n      let newX = elementStart.current.x + (e.clientX - dragStart.current.x);\n      let newY = elementStart.current.y + (e.clientY - dragStart.current.y);\n\n      if (snapToGrid) {\n        newX = Math.round(newX / gridSize) * gridSize;\n        newY = Math.round(newY / gridSize) * gridSize;\n      }\n\n      const newPosition = { x: newX, y: newY };\n      setPosition(newPosition);\n      onPositionChange?.(newPosition);\n    },\n    [isDragging, gridSize, snapToGrid, onPositionChange],\n  );\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  useEffect(() => {\n    if (isDragging) {\n      window.addEventListener(\"mousemove\", handleMouseMove);\n      window.addEventListener(\"mouseup\", handleMouseUp);\n      return () => {\n        window.removeEventListener(\"mousemove\", handleMouseMove);\n        window.removeEventListener(\"mouseup\", handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div\n      ref={elementRef}\n      style={{\n        position: \"absolute\",\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        cursor: isDragging ? \"grabbing\" : \"grab\",\n        userSelect: \"none\",\n        zIndex: isDragging ? 1000 : 1,\n      }}\n      onMouseDown={handleMouseDown}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst borderStyles = {\n  modern: \"bg-gradient-to-br from-gray-50 to-gray-100 shadow-sm\",\n  classic: \"bg-gradient-to-br from-amber-50 to-amber-100 shadow-inner\",\n  rustic: \"bg-gradient-to-br from-stone-100 to-stone-200 shadow-inner\",\n};\n\nconst borderWidths = {\n  thin: \"p-4\",\n  medium: \"p-6\",\n  thick: \"p-8\",\n};\n\nexport function ArtBoardLayout({\n  gridSize = 20,\n  borderWidth = \"medium\",\n  borderStyle = \"modern\",\n  backgroundColor = \"white\",\n  gridColor = \"rgba(0, 0, 0, 0.05)\",\n  snapToGrid = true,\n  minHeight = \"400px\",\n  showGridLines = true,\n  className,\n  children,\n}: ArtBoardLayoutProps) {\n  const boardRef = useRef<HTMLDivElement>(null);\n  const [elements, setElements] = useState<React.ReactNode[]>([]);\n\n  useEffect(() => {\n    if (!children) return;\n    const childArray = React.Children.toArray(children);\n    setElements(\n      childArray.map((child, index) => (\n        <Draggable\n          key={index}\n          gridSize={gridSize}\n          snapToGrid={snapToGrid}\n          initialPosition={{ x: index * gridSize * 2, y: gridSize * 2 }}\n        >\n          {child}\n        </Draggable>\n      )),\n    );\n  }, [children, gridSize, snapToGrid]);\n\n  const gridBackground = showGridLines\n    ? {\n        backgroundImage: `\n          linear-gradient(to right, ${gridColor} 1px, transparent 1px),\n          linear-gradient(to bottom, ${gridColor} 1px, transparent 1px)\n        `,\n        backgroundSize: `${gridSize}px ${gridSize}px`,\n      }\n    : {};\n\n  return (\n    <div\n      ref={boardRef}\n      className={cn(\n        \"relative overflow-hidden rounded-xl border transition-colors\",\n        \"hover:shadow-lg\",\n        \"focus-within:ring-2 focus-within:ring-primary/20\",\n        borderStyles[borderStyle],\n        borderWidths[borderWidth],\n        className,\n      )}\n      style={{\n        minHeight,\n        backgroundColor,\n        ...gridBackground,\n      }}\n    >\n      {elements}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}