{
  "name": "studio-pagination",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui-canvas/studio-pagination.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n  Loader2,\n} from \"lucide-react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { useSwipeable } from \"react-swipeable\";\n\ntype PaginationVariant =\n  | \"default\"\n  | \"outline\"\n  | \"ghost\"\n  | \"minimal\"\n  | \"gradient\";\ntype PaginationShape = \"rounded\" | \"square\" | \"pill\";\ntype PaginationSize = \"sm\" | \"md\" | \"lg\";\ntype PaginationAnimation = \"fade\" | \"slide\" | \"scale\" | \"none\";\n\ninterface StudioPaginationProps {\n  totalPages: number;\n  currentPage: number;\n  pageSize?: number;\n  onPageChange?: (page: number) => void;\n  onPageSizeChange?: (size: number) => void;\n  isLoading?: boolean;\n  className?: string;\n  variant?: PaginationVariant;\n  shape?: PaginationShape;\n  size?: PaginationSize;\n  showFirstLast?: boolean;\n  showPageSize?: boolean;\n  animation?: PaginationAnimation;\n  showProgress?: boolean;\n  enableKeyboard?: boolean;\n  enableSwipe?: boolean;\n  enableMouseWheel?: boolean;\n  customColors?: {\n    active?: string;\n    hover?: string;\n    text?: string;\n  };\n}\n\nconst variantStyles: Record<PaginationVariant, string> = {\n  default: \"bg-background/95 border shadow-sm\",\n  outline: \"border-2\",\n  ghost: \"hover:bg-muted/50\",\n  minimal: \"\",\n  gradient:\n    \"bg-gradient-to-r from-primary/20 via-background to-primary/20 border shadow-sm\",\n};\n\nconst shapeStyles: Record<PaginationShape, string> = {\n  rounded: \"rounded-lg\",\n  square: \"rounded-none\",\n  pill: \"rounded-full\",\n};\n\nconst sizeStyles: Record<PaginationSize, string> = {\n  sm: \"h-7 w-7 text-xs\",\n  md: \"h-8 w-8 text-sm\",\n  lg: \"h-9 w-9 text-base\",\n};\n\nconst containerSizeStyles: Record<PaginationSize, string> = {\n  sm: \"p-1 gap-1\",\n  md: \"p-2 gap-2\",\n  lg: \"p-3 gap-3\",\n};\n\nconst animations: Record<PaginationAnimation, any> = {\n  fade: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n    transition: { duration: 0.2 },\n  },\n  slide: {\n    initial: { x: -20, opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: 20, opacity: 0 },\n    transition: { duration: 0.2 },\n  },\n  scale: {\n    initial: { scale: 0.8, opacity: 0 },\n    animate: { scale: 1, opacity: 1 },\n    exit: { scale: 0.8, opacity: 0 },\n    transition: { duration: 0.2 },\n  },\n  none: {},\n};\n\nexport default function StudioPagination({\n  totalPages,\n  currentPage,\n  pageSize = 10,\n  onPageChange,\n  onPageSizeChange,\n  isLoading = false,\n  className,\n  variant = \"default\",\n  shape = \"rounded\",\n  size = \"md\",\n  showFirstLast = true,\n  showPageSize = false,\n  animation = \"fade\",\n  showProgress = false,\n  enableKeyboard = true,\n  enableSwipe = true,\n  enableMouseWheel = true,\n  customColors,\n}: StudioPaginationProps) {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [direction, setDirection] = useState<\"left\" | \"right\" | null>(null);\n\n  // Keyboard navigation\n  useHotkeys(\n    \"left\",\n    () => {\n      if (enableKeyboard && !isLoading && currentPage > 1) {\n        setDirection(\"left\");\n        handlePageChange(currentPage - 1);\n      }\n    },\n    [currentPage, isLoading],\n  );\n\n  useHotkeys(\n    \"right\",\n    () => {\n      if (enableKeyboard && !isLoading && currentPage < totalPages) {\n        setDirection(\"right\");\n        handlePageChange(currentPage + 1);\n      }\n    },\n    [currentPage, isLoading],\n  );\n\n  // Swipe navigation\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => {\n      if (enableSwipe && !isLoading && currentPage < totalPages) {\n        setDirection(\"right\");\n        handlePageChange(currentPage + 1);\n      }\n    },\n    onSwipedRight: () => {\n      if (enableSwipe && !isLoading && currentPage > 1) {\n        setDirection(\"left\");\n        handlePageChange(currentPage - 1);\n      }\n    },\n    preventScrollOnSwipe: true,\n    trackMouse: true,\n  });\n\n  // Mouse wheel navigation\n  useEffect(() => {\n    if (!enableMouseWheel) return;\n\n    const handleWheel = (e: WheelEvent) => {\n      if (isLoading) return;\n      if (e.deltaY > 0 && currentPage < totalPages) {\n        setDirection(\"right\");\n        handlePageChange(currentPage + 1);\n      } else if (e.deltaY < 0 && currentPage > 1) {\n        setDirection(\"left\");\n        handlePageChange(currentPage - 1);\n      }\n    };\n\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener(\"wheel\", handleWheel);\n      return () => container.removeEventListener(\"wheel\", handleWheel);\n    }\n  }, [currentPage, totalPages, isLoading, enableMouseWheel]);\n\n  const handlePageChange = (page: number) => {\n    if (onPageChange) {\n      onPageChange(page);\n    } else {\n      const params = new URLSearchParams(searchParams.toString());\n      params.set(\"page\", page.toString());\n      router.push(`?${params.toString()}`);\n    }\n  };\n\n  const getPageNumbers = () => {\n    const pages = [];\n    if (totalPages <= 7) {\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      if (currentPage <= 4) {\n        for (let i = 1; i <= 5; i++) {\n          pages.push(i);\n        }\n        pages.push(\"...\");\n        pages.push(totalPages);\n      } else if (currentPage >= totalPages - 3) {\n        pages.push(1);\n        pages.push(\"...\");\n        for (let i = totalPages - 4; i <= totalPages; i++) {\n          pages.push(i);\n        }\n      } else {\n        pages.push(1);\n        pages.push(\"...\");\n        for (let i = currentPage - 1; i <= currentPage + 1; i++) {\n          pages.push(i);\n        }\n        pages.push(\"...\");\n        pages.push(totalPages);\n      }\n    }\n    return pages;\n  };\n\n  const buttonStyles = cn(\n    sizeStyles[size],\n    shapeStyles[shape],\n    \"border-border/50\",\n    \"hover:bg-muted/50 dark:hover:bg-muted/50\",\n    \"transition-all duration-200\",\n    \"disabled:pointer-events-none disabled:opacity-50\",\n    customColors?.hover && `hover:${customColors.hover}`,\n    customColors?.text && customColors.text,\n  );\n\n  const progressWidth = (currentPage / totalPages) * 100;\n\n  return (\n    <div\n      ref={containerRef}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <motion.nav\n        className={cn(\n          \"relative flex items-center justify-between\",\n          containerSizeStyles[size],\n          variantStyles[variant],\n          shapeStyles[shape],\n          \"bg-background/95 text-foreground transition-all duration-200\",\n          \"dark:bg-background/95 dark:text-foreground dark:shadow-md dark:shadow-primary/5\",\n          isHovered && \"scale-102\",\n          className,\n        )}\n        role=\"navigation\"\n        aria-label=\"Pagination\"\n        initial={false}\n        animate={{ scale: isHovered ? 1.02 : 1 }}\n        transition={{ duration: 0.2 }}\n      >\n        {showProgress && (\n          <motion.div\n            className=\"absolute bottom-0 left-0 h-0.5 bg-primary\"\n            initial={{ width: 0 }}\n            animate={{ width: `${progressWidth}%` }}\n            transition={{ duration: 0.3 }}\n          />\n        )}\n\n        <div className=\"flex items-center gap-1\">\n          {showFirstLast && (\n            <AnimatePresence mode=\"wait\">\n              <motion.div key=\"first\" {...animations[animation]}>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => handlePageChange(1)}\n                  disabled={currentPage === 1 || isLoading}\n                  aria-label=\"First page\"\n                  className={buttonStyles}\n                >\n                  <ChevronsLeft\n                    className={cn(\n                      size === \"sm\" && \"h-3 w-3\",\n                      size === \"md\" && \"h-4 w-4\",\n                      size === \"lg\" && \"h-5 w-5\",\n                    )}\n                  />\n                </Button>\n              </motion.div>\n            </AnimatePresence>\n          )}\n\n          <AnimatePresence mode=\"wait\">\n            <motion.div key=\"prev\" {...animations[animation]}>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => handlePageChange(currentPage - 1)}\n                disabled={currentPage === 1 || isLoading}\n                aria-label=\"Previous page\"\n                className={buttonStyles}\n              >\n                <ChevronLeft\n                  className={cn(\n                    size === \"sm\" && \"h-3 w-3\",\n                    size === \"md\" && \"h-4 w-4\",\n                    size === \"lg\" && \"h-5 w-5\",\n                  )}\n                />\n              </Button>\n            </motion.div>\n          </AnimatePresence>\n\n          <div className=\"flex items-center gap-1\">\n            <AnimatePresence mode=\"wait\">\n              {getPageNumbers().map((page, index) =>\n                page === \"...\" ? (\n                  <motion.span\n                    key={`ellipsis-${index}`}\n                    className={cn(\n                      \"px-2 text-muted-foreground dark:text-muted-foreground\",\n                      size === \"sm\" && \"text-xs\",\n                      size === \"md\" && \"text-sm\",\n                      size === \"lg\" && \"text-base\",\n                    )}\n                    {...animations[animation]}\n                  >\n                    ...\n                  </motion.span>\n                ) : (\n                  <motion.div key={page} {...animations[animation]}>\n                    <Button\n                      variant={currentPage === page ? \"default\" : \"outline\"}\n                      size=\"icon\"\n                      onClick={() => handlePageChange(page as number)}\n                      disabled={isLoading}\n                      aria-label={`Page ${page}`}\n                      aria-current={currentPage === page ? \"page\" : undefined}\n                      className={cn(\n                        buttonStyles,\n                        \"font-medium\",\n                        currentPage === page &&\n                          cn(\n                            \"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90 dark:hover:bg-primary/90\",\n                            customColors?.active,\n                          ),\n                      )}\n                    >\n                      {isLoading && currentPage === page ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        page\n                      )}\n                    </Button>\n                  </motion.div>\n                ),\n              )}\n            </AnimatePresence>\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            <motion.div key=\"next\" {...animations[animation]}>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => handlePageChange(currentPage + 1)}\n                disabled={currentPage === totalPages || isLoading}\n                aria-label=\"Next page\"\n                className={buttonStyles}\n              >\n                <ChevronRight\n                  className={cn(\n                    size === \"sm\" && \"h-3 w-3\",\n                    size === \"md\" && \"h-4 w-4\",\n                    size === \"lg\" && \"h-5 w-5\",\n                  )}\n                />\n              </Button>\n            </motion.div>\n          </AnimatePresence>\n\n          {showFirstLast && (\n            <AnimatePresence mode=\"wait\">\n              <motion.div key=\"last\" {...animations[animation]}>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => handlePageChange(totalPages)}\n                  disabled={currentPage === totalPages || isLoading}\n                  aria-label=\"Last page\"\n                  className={buttonStyles}\n                >\n                  <ChevronsRight\n                    className={cn(\n                      size === \"sm\" && \"h-3 w-3\",\n                      size === \"md\" && \"h-4 w-4\",\n                      size === \"lg\" && \"h-5 w-5\",\n                    )}\n                  />\n                </Button>\n              </motion.div>\n            </AnimatePresence>\n          )}\n        </div>\n      </motion.nav>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}