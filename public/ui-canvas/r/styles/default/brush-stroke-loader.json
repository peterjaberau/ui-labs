{
  "name": "brush-stroke-loader",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "ui-canvas/brush-stroke-loader.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface BrushStrokeLoaderProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  progress?: number;\n  strokeStyle?: \"paint\" | \"ink\" | \"watercolor\";\n  colorFlow?: boolean;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport default function BrushStrokeLoader({\n  progress = 0,\n  strokeStyle = \"paint\",\n  colorFlow = true,\n  size = \"md\",\n  className,\n  ...props\n}: BrushStrokeLoaderProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const sizes = {\n    sm: { width: 120, height: 6 },\n    md: { width: 200, height: 8 },\n    lg: { width: 300, height: 12 },\n  };\n\n  const { width, height } = sizes[size];\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Set up gradient for color flow\n    const gradient = ctx.createLinearGradient(0, 0, width, 0);\n    if (colorFlow) {\n      gradient.addColorStop(0, \"#FF6B6B\");\n      gradient.addColorStop(0.5, \"#4ECDC4\");\n      gradient.addColorStop(1, \"#45B7D1\");\n    } else {\n      gradient.addColorStop(0, \"#4ECDC4\");\n      gradient.addColorStop(1, \"#4ECDC4\");\n    }\n\n    ctx.strokeStyle = gradient;\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = height;\n\n    // Draw stroke based on style\n    ctx.beginPath();\n    switch (strokeStyle) {\n      case \"paint\":\n        ctx.setLineDash([]);\n        break;\n      case \"ink\":\n        ctx.setLineDash([height * 2, height]);\n        break;\n      case \"watercolor\":\n        ctx.setLineDash([height, height * 0.5]);\n        break;\n    }\n\n    ctx.moveTo(0, height / 2);\n    ctx.lineTo((width * progress) / 100, height / 2);\n    ctx.stroke();\n  }, [progress, strokeStyle, colorFlow, width, height]);\n\n  return (\n    <div className={cn(\"relative\", className)} {...props}>\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        className=\"rounded-full\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}